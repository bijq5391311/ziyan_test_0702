{"version":3,"sources":["cookie/jquery.cookie.js"],"names":["factory","define","amd","exports","module","require","jQuery","$","encode","s","config","raw","encodeURIComponent","decode","decodeURIComponent","stringifyCookieValue","value","json","JSON","stringify","String","parseCookieValue","indexOf","slice","replace","pluses","parse","e","read","converter","isFunction","cookie","key","options","arguments","length","extend","defaults","expires","days","t","Date","setMilliseconds","getMilliseconds","document","toUTCString","path","domain","secure","join","result","undefined","cookies","split","i","l","parts","name","shift","removeCookie"],"mappings":"CAOC,SAAUA,GACY,kBAAXC,SAAyBA,OAAOC,IAE1CD,QAAQ,UAAWD,GACU,gBAAZG,SAEjBC,OAAOD,QAAUH,EAAQK,QAAQ,WAGjCL,EAAQM,SAER,SAAUC,GAIX,QAASC,GAAOC,GACf,MAAOC,GAAOC,IAAMF,EAAIG,mBAAmBH,GAG5C,QAASI,GAAOJ,GACf,MAAOC,GAAOC,IAAMF,EAAIK,mBAAmBL,GAG5C,QAASM,GAAqBC,GAC7B,MAAOR,GAAOE,EAAOO,KAAOC,KAAKC,UAAUH,GAASI,OAAOJ,IAG5D,QAASK,GAAiBZ,GACF,IAAnBA,EAAEa,QAAQ,OAEbb,EAAIA,EAAEc,MAAM,MAAOC,QAAQ,OAAQ,KAAKA,QAAQ,QAAS,MAG1D,KAKC,MADAf,GAAIK,mBAAmBL,EAAEe,QAAQC,EAAQ,MAClCf,EAAOO,KAAOC,KAAKQ,MAAMjB,GAAKA,EACpC,MAAMkB,KAGT,QAASC,GAAKnB,EAAGoB,GAChB,GAAIb,GAAQN,EAAOC,IAAMF,EAAIY,EAAiBZ,EAC9C,OAAOF,GAAEuB,WAAWD,GAAaA,EAAUb,GAASA,EA/BrD,GAAIS,GAAS,MAkCTf,EAASH,EAAEwB,OAAS,SAAUC,EAAKhB,EAAOiB,GAI7C,GAAIC,UAAUC,OAAS,IAAM5B,EAAEuB,WAAWd,GAAQ,CAGjD,GAFAiB,EAAU1B,EAAE6B,UAAW1B,EAAO2B,SAAUJ,GAET,gBAApBA,GAAQK,QAAsB,CACxC,GAAIC,GAAON,EAAQK,QAASE,EAAIP,EAAQK,QAAU,GAAIG,KACtDD,GAAEE,gBAAgBF,EAAEG,kBAA2B,MAAPJ,GAGzC,MAAQK,UAASb,QAChBvB,EAAOwB,GAAM,IAAKjB,EAAqBC,GACvCiB,EAAQK,QAAU,aAAeL,EAAQK,QAAQO,cAAgB,GACjEZ,EAAQa,KAAU,UAAYb,EAAQa,KAAO,GAC7Cb,EAAQc,OAAU,YAAcd,EAAQc,OAAS,GACjDd,EAAQe,OAAU,WAAa,IAC9BC,KAAK,IAaR,IARA,GAAIC,GAASlB,EAAMmB,UAIlBC,EAAUR,SAASb,OAASa,SAASb,OAAOsB,MAAM,SAClDC,EAAI,EACJC,EAAIH,EAAQjB,OAENmB,EAAIC,EAAGD,IAAK,CAClB,GAAIE,GAAQJ,EAAQE,GAAGD,MAAM,KAC5BI,EAAO5C,EAAO2C,EAAME,SACpB3B,EAASyB,EAAMP,KAAK,IAErB,IAAIjB,IAAQyB,EAAM,CAEjBP,EAAStB,EAAKG,EAAQf,EACtB,OAIIgB,GAAmCmB,UAA3BpB,EAASH,EAAKG,MAC1BmB,EAAOO,GAAQ1B,GAIjB,MAAOmB,GAGRxC,GAAO2B,YAEP9B,EAAEoD,aAAe,SAAU3B,EAAKC,GAG/B,MADA1B,GAAEwB,OAAOC,EAAK,GAAIzB,EAAE6B,UAAWH,GAAWK,eAClC/B,EAAEwB,OAAOC","file":"jquery.cookie.js","sourcesContent":["/*!\n * jQuery Cookie Plugin v1.4.1\n * https://github.com/carhartl/jquery-cookie\n *\n * Copyright 2006, 2014 Klaus Hartl\n * Released under the MIT license\n */\n(function (factory) {\n\tif (typeof define === 'function' && define.amd) {\n\t\t// AMD (Register as an anonymous module)\n\t\tdefine(['jquery'], factory);\n\t} else if (typeof exports === 'object') {\n\t\t// Node/CommonJS\n\t\tmodule.exports = factory(require('jquery'));\n\t} else {\n\t\t// Browser globals\n\t\tfactory(jQuery);\n\t}\n}(function ($) {\n\n\tvar pluses = /\\+/g;\n\n\tfunction encode(s) {\n\t\treturn config.raw ? s : encodeURIComponent(s);\n\t}\n\n\tfunction decode(s) {\n\t\treturn config.raw ? s : decodeURIComponent(s);\n\t}\n\n\tfunction stringifyCookieValue(value) {\n\t\treturn encode(config.json ? JSON.stringify(value) : String(value));\n\t}\n\n\tfunction parseCookieValue(s) {\n\t\tif (s.indexOf('\"') === 0) {\n\t\t\t// This is a quoted cookie as according to RFC2068, unescape...\n\t\t\ts = s.slice(1, -1).replace(/\\\\\"/g, '\"').replace(/\\\\\\\\/g, '\\\\');\n\t\t}\n\n\t\ttry {\n\t\t\t// Replace server-side written pluses with spaces.\n\t\t\t// If we can't decode the cookie, ignore it, it's unusable.\n\t\t\t// If we can't parse the cookie, ignore it, it's unusable.\n\t\t\ts = decodeURIComponent(s.replace(pluses, ' '));\n\t\t\treturn config.json ? JSON.parse(s) : s;\n\t\t} catch(e) {}\n\t}\n\n\tfunction read(s, converter) {\n\t\tvar value = config.raw ? s : parseCookieValue(s);\n\t\treturn $.isFunction(converter) ? converter(value) : value;\n\t}\n\n\tvar config = $.cookie = function (key, value, options) {\n\n\t\t// Write\n\n\t\tif (arguments.length > 1 && !$.isFunction(value)) {\n\t\t\toptions = $.extend({}, config.defaults, options);\n\n\t\t\tif (typeof options.expires === 'number') {\n\t\t\t\tvar days = options.expires, t = options.expires = new Date();\n\t\t\t\tt.setMilliseconds(t.getMilliseconds() + days * 864e+5);\n\t\t\t}\n\n\t\t\treturn (document.cookie = [\n\t\t\t\tencode(key), '=', stringifyCookieValue(value),\n\t\t\t\toptions.expires ? '; expires=' + options.expires.toUTCString() : '', // use expires attribute, max-age is not supported by IE\n\t\t\t\toptions.path    ? '; path=' + options.path : '',\n\t\t\t\toptions.domain  ? '; domain=' + options.domain : '',\n\t\t\t\toptions.secure  ? '; secure' : ''\n\t\t\t].join(''));\n\t\t}\n\n\t\t// Read\n\n\t\tvar result = key ? undefined : {},\n\t\t\t// To prevent the for loop in the first place assign an empty array\n\t\t\t// in case there are no cookies at all. Also prevents odd result when\n\t\t\t// calling $.cookie().\n\t\t\tcookies = document.cookie ? document.cookie.split('; ') : [],\n\t\t\ti = 0,\n\t\t\tl = cookies.length;\n\n\t\tfor (; i < l; i++) {\n\t\t\tvar parts = cookies[i].split('='),\n\t\t\t\tname = decode(parts.shift()),\n\t\t\t\tcookie = parts.join('=');\n\n\t\t\tif (key === name) {\n\t\t\t\t// If second argument (value) is a function it's a converter...\n\t\t\t\tresult = read(cookie, value);\n\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\t// Prevent storing a cookie that we couldn't decode.\n\t\t\tif (!key && (cookie = read(cookie)) !== undefined) {\n\t\t\t\tresult[name] = cookie;\n\t\t\t}\n\t\t}\n\n\t\treturn result;\n\t};\n\n\tconfig.defaults = {};\n\n\t$.removeCookie = function (key, options) {\n\t\t// Must not alter options, thus extending a fresh object...\n\t\t$.cookie(key, '', $.extend({}, options, { expires: -1 }));\n\t\treturn !$.cookie(key);\n\t};\n\n}));\n"]}