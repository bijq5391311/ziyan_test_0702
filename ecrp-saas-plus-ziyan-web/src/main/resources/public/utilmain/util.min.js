
((function() {
	//时间格式化：Date类型变量  time.format("YYYY-MM-DD HH:mm:ss")
	Date.prototype.format = function (fmt) { // author: meizz
	    var o = {
	        "M+": this.getMonth() + 1, // 月份
	        "d+": this.getDate(), // 日
	        "h+": this.getHours(), // 小时
	        "m+": this.getMinutes(), // 分
	        "s+": this.getSeconds(), // 秒
	        "q+": Math.floor((this.getMonth() + 3) / 3), // 季度
	        "S": this.getMilliseconds() // 毫秒
	    };
	    if (/(y+)/.test(fmt)) fmt = fmt.replace(RegExp.$1, (this.getFullYear() + "").substr(4 - RegExp.$1.length));
	    for (var k in o)
	      if (new RegExp("(" + k + ")").test(fmt)) fmt = fmt.replace(RegExp.$1, (RegExp.$1.length == 1) ? (o[k]) : (("00" + o[k]).substr(("" + o[k]).length)));
	    return fmt;
	  }
})());



(function() {
	
	function toMap(obj, preffix, map = {}) {
		var isObject = function (obj) {
			if(typeof obj === "object" && !Array.isArray(obj))
				return true;
			return false;
		}
		
		var isArray = Array.isArray;
		
		function arrayToMap(arr, preffix = "", map = {}) {
			for(var i = 0; i < arr.length; i++) {
				var pre = `${preffix}[${i}]`;
				if(isArray(arr[i])) {
					arrayToMap(arr[i], pre, map)
				} else if(arr[i] instanceof Date) {
					map[pre] = arr[i];
				} else if(isObject(arr[i])) {
					objectToMap(arr[i], pre, map)
				} else {
					map[pre] = arr[i];
				}
			}
		}

		function objectToMap(obj, preffix = "", map = {}) {
			if(obj === undefined || obj === null)
				return;
			var keys = Object.keys(obj);
			for(var i = 0; i < keys.length; i++) {
				var pre = `${preffix}.${keys[i]}`;
				if(pre.startsWith(".")) {
					pre = pre.substr(1);
				}
				var curr = obj[keys[i]];
				if(isArray(curr)) {
					arrayToMap(curr, pre, map)
				} else if(curr instanceof Date) {
					map[pre] = curr;
				} else if(isObject(curr)) {
					objectToMap(curr, pre, map)
				} else {
					map[pre] = curr;
				}
			}
		}
		
		if(isArray(obj)) {
			arrayToMap(obj, preffix, map);
		} else {
			objectToMap(obj, preffix, map)
		}
		
		return map;
	}

	var ObjectUtil = {
		toMap: toMap
	}
	
	this.ObjectUtil = {
		toMap: function(obj, preffix, map = {}) {
			return toMap(obj, preffix, map);
		}
	}
	return ObjectUtil;
})(this)
;
define("object-util", function(){});

require(["vue", "nui","utilbuild/main"], function(Vue) {

	/**
	 * 权限检查指令
	 * <el-button v-auth auth="/module/controller/action"></el-button>
	 * */
	Vue.directive("auth", {
		bind: function(el,binding,vnode,oldVnode) {
			vnode.componentInstance.$el.classList.add(isAuthorize(el.getAttribute("auth"), el.getAttribute("code")) ? "auth" : "hidden")
		}
	})
	
	
	Vue.directive("showRequired",  {
		update: function(el,binding, vnode, oldVnode) {
			var instance = vnode.componentInstance;
			var input = instance;
			var el_form_item_pre; /** vnode最靠近el-form的el-form-item */
			var el_form_item_near;/** vnode最靠近当前元素的el-form-item */
			
			var nameMap = null;
			if(vnode.context && typeof vnode.context.nameMap === "object") {
				nameMap = vnode.context.nameMap;
			}
			
			while(instance.$parent) {
				instance = instance.$parent;
				if(instance.$options && instance.$options.componentName === "ElFormItem") {
					if(!el_form_item_near) {
						el_form_item_near = instance;
					}
					el_form_item_pre = instance;
				}
				if(instance.$options && instance.$options.componentName === "ElForm") {
					el_form_item_pre.isRequired = el_form_item_near.isRequired; //配置必填图标
					//收集格式化需要的信息 (表格)
					if(nameMap) {
						var expression = vnode.data.model.expression;
						var subffix = "model.";
						if(expression && expression.startsWith(subffix)) {
							var name = expression.substr(subffix.length);
							var text = el_form_item_pre.label;
							text = (text.endsWith("：") || text.endsWith("：")) ? text.substr(0,text.length-1) : text;
							var instance = input;
							
							if(!nameMap[name]) {
								nameMap[name] = {};
							}
							/** 仅用于存放信息，不考虑响应式更新 */
							nameMap[name].text = text;
							nameMap[name].name = name;
							nameMap[name].instance = input;
						}
					}
					
					return ;
				}
			}
		}
	})
});
define("directive", function(){});

/**
 * 树组件
 *
 * @author Adolph
 */
define('ns-tree',["jquery", "vue", "nui"], function ($, Vue, Nui) {

	var $template = `<el-tree-extra ref="store"
						:data="treeData"
						:empty-text="emptyText" 
						:node-key="nodeKey" 
						:props="props"
						:load="load" 
						:icon-add="iconAdd"
						:icon-edit="iconEdit"
						:icon-delete="iconDelete"
						:render-content="renderContent"
						:highlight-current="highlightCurrent"
						:current-node-key="currentNodeKey"
						:default-expand-all="defaultExpandAll"
						:expand-on-click-node="expandOnClickNode"
						:auto-expand-parent="autoExpandParent"
						:default-expanded-keys="defaultExpandedKeys"
						:show-checkbox="showCheckbox"
						:check-strictly="checkStrictly"
						:default-checked-keys="defaultCheckedKeys"
						:filter-node-method="filterNodeMethod"
						:accordion="accordion"
						:indent="indent"
						:show-icon="showIcon"
						:maxlength="maxlength"
						:before-add-node="beforeAddNode"
						:save-new-data="saveNewData"
						:before-edit-node="beforeEditNode"
						:save-edit-data="saveEditData"
						:set-custom-icon="setCustomIcon"
						:before-delete-node="beforeDeleteNode"
						:after-delete-node="afterDeleteNode"
						@node-click="nodeClickHandle"
						@check-change="checkChangeHandle"
						@current-change="currentChangeHandle"
						@node-expand="nodeExpandHandle"
						@node-collapse="nodeCollapseHandle">
					 </el-tree-extra>
					`;

	Vue.component("ns-tree", {
		template: $template,
		data: function () {
			return {
				treeData: this.data
			}
		},
		props: {
			url: String,
			data: {
				type: Array,
				default: function () {
					return [];
				}
			},
			emptyText: {
				type: String,
				default: function () {
					return "暂无数据";
				}
			},
			nodeKey: String,
			checkStrictly: Boolean,
			defaultExpandAll: Boolean,
			expandOnClickNode: {
				type: Boolean,
				default: true
			},
			autoExpandParent: {
				type: Boolean,
				default: true
			},
			showIcon: Boolean,
			defaultCheckedKeys: Array,
			defaultExpandedKeys: Array,
			renderContent: Function,
			showCheckbox: {
				type: Boolean,
				default: false
			},
			maxlength: {
				type: Number
			},
			props: {
				default: function () {
					return {
						children: 'children',
						label: 'label',
						icon: 'icon'
					};
				}
			},
			lazy: {
				type: Boolean,
				default: false
			},
			highlightCurrent: Boolean,
			currentNodeKey: [String, Number],
			load: Function,
			filterNodeMethod: Function,
			accordion: Boolean,
			indent: {
				type: Number,
				default: 16
			},
			beforeAddNode: Function,
			saveNewData: Function,
			beforeEditNode: Function,
			saveEditData: Function,
			setCustomIcon: Function,
			beforeDeleteNode: Function,
			afterDeleteNode: Function,
			iconAdd: {
				type: String,
				default: function () {
					return "bui-add";
				}
			},
			iconEdit: {
				type: String,
				default: function () {
					return "bui-edit";
				}
			},
			iconDelete: {
				type: String,
				default: function () {
					return "bui-delete";
				}
			}
		},
		computed: {},
		watch: {
			defaultCheckedKeys: function (newVal) {
				this.$refs.store.defaultCheckedKeys = newVal;
				this.$refs.store.setDefaultCheckedKey(newVal);
			},
			defaultExpandedKeys: function (newVal) {
				this.$refs.store.defaultExpandedKeys = newVal;
				this.$refs.store.setDefaultExpandedKeys(newVal);
			},
			data: function(newVal){
				this.$set(this,"treeData",newVal);
			}
			
		},
		methods: {
			filter: function (value) {
				if (!this.filterNodeMethod) {
					throw new Error('[Tree] filterNodeMethod is required when filter');
				}
				this.$refs.store.filter(value);
			},
			getNodeKey: function (node, index) {
				const nodeKey = this.nodeKey;
				if (nodeKey && node) {
					return node.data[nodeKey];
				}
				return index;
			},

			getCheckedNodes: function (leafOnly) {
				return this.$refs.store.getCheckedNodes(leafOnly);
			},
			getCheckedKeys: function (leafOnly) {
				return this.$refs.store.getCheckedKeys(leafOnly);
			},
			setCheckedNodes: function (nodes, leafOnly) {
				if (!this.nodeKey) {
					throw new Error('[Tree] nodeKey is required in setCheckedNodes');
				}
				this.$refs.store.setCheckedNodes(nodes, leafOnly);
			},
			setCheckedKeys: function (keys, leafOnly) {
				if (!this.nodeKey) {
					throw new Error('[Tree] nodeKey is required in setCheckedNodes');
				}
				this.$refs.store.setCheckedKeys(keys, leafOnly);
			},
			setChecked: function (data, checked, deep) {
				this.$refs.store.setChecked(data, checked, deep);
			},
			nodeClickHandle: function (nodeData, node, instance) {
				this.$emit("node-click", nodeData, node, instance);
			},
			checkChangeHandle: function (nodeData, node, instance) {
				this.$emit("check-change", nodeData, node, instance);
			},
			nodeExpandHandle: function (nodeData, node, instance) {
				this.$emit("node-expand", nodeData, node, instance);
			},
			nodeCollapseHandle: function (nodeData, node, instance) {
				this.$emit("node-collapse", nodeData, node, instance);
			},
			currentChangeHandle: function (nodeData, node) {
				this.$emit("current-change", nodeData, node);
			},
			// 新增方法
			/**
			 * 刷新树
			 */
			refresh: function() {
				var _url = this.url;
				if (_url) {
					this.treeData = [];
					loadTreeData(this.treeData, _url);
				}
			}
		},
		created: function () {
			// 如果url不为空，做异步加载数据
			if (this.url) {
				loadTreeData(this.treeData, this.url);
			}
		}
	});

	// 异步加载tree数据
	function loadTreeData(data, url) {
		// 清空数据，在异步请求数据
		$.ajax({
			url: ctx + url,
			async: true,
			dataType: "json",
			success: function (json) {
				var result = json.result;
				// 顶级节点为空，直接从子节点中获取
				if (result instanceof Object && !result.hasOwnProperty("id") && !result.hasOwnProperty("label") && result.hasOwnProperty("children")) {
					$.each(result.children, function (i, val) {
						data.push(val);
					});
				} else if (result instanceof Object && result.hasOwnProperty("id") && result.hasOwnProperty("label")) {
					// 顶级节点不为空
					data.push(result);
				} else if (Array.isArray(result)) {
					// 直接返回多个节点
					$.each(result, function (i, val) {
						data.push(val);
					});
				} else {
					throw new Error("数据类型错误");
				}
			},
			error: function () {
				throw new Error("数据请求出错");
			}
		});
	}

});
/**
 * 下拉组件二次封装
 *
 * @author Adolph
 */
define('ns-select',["jquery", "vue", "nui"], function ($, Vue, Nui) {

	var template = `
		<el-select v-model="currentValue" ref="nsselect"
					:placeholder="placeholder" 
					:size="size" 
					:disabled="disabled" 
					:multiple="multiple" 
					:multiple-limit="multipleLimit"
					:filterable="filterable"
					:clearable="clearable"
				    v-on:change="changeHandle" 
					v-on:visible-change="visibleChangeHandle">
			<el-option v-for="item in options" :key="item.value" :label="item.label" :value="item.value"></el-option>
	  	</el-select>
	`;

	Vue.component("ns-select", {
		template: template,
		data: function () {
			return {
				options: [],
				// 双向绑定值-必须
				currentValue: this.value
			}
		},
		props: {
			url: {
				type: String,
				default: ""
			},
			value: {},
			multiple: {
				type: Boolean,
				default: function () {
					return false;
				}
			},
			clearable: {
				type: Boolean,
				default: function () {
					return false;
				}
			},
			multipleLimit: {
				type: Number,
				default: function () {
					return 0;
				}
			},
			name: String,
			placeholder: String,
			filterable: {
				type: Boolean,
				default: false
			},
			size: {
				type: String,
				default: ""
			},
			disabled: {
				type: Boolean,
				default: false
			}
		},
		methods: {
			/**
			 * 选中值发生变化时触发
			 * @param val
			 */
			changeHandle: function (val) {
				this.$emit("change", val);
			},
			
			/**
			 * 下拉框出现/隐藏时触发
			 * @param val
			 */
			visibleChangeHandle: function (val) {
				var _this = this;
				if (this.url) {
					loadOptions(_this, _this.options, _this.url);
				}
				this.$emit("visible-change", val);
			},
		    getText(format){
		    	return this.$refs.nsselect.getText(format);
		    },
			refresh(){
				var _this = this;
				if (this.url) {
					loadOptions(_this, _this.options, _this.url);
				}
			}
		},
		created: function () {
			var _this = this;
			if (this.url) {
//				loadOptions(_this, _this.options, _this.url);
			}
		},
		watch: {
			currentValue: function (val) {
				this.$emit('input', val);
			},
			value: function (val) {
				this.currentValue = val;
			}
		}
	});

	// 异步加载下拉数据
	function loadOptions(_this, data, url) {
		data.splice(0);
		$.ajax({
			url: ctx + url,
			async: true,
			success: function (json) {
				var items = json.result;
				if (Array.isArray(items)) {
					var option = {};
					for (var i = 0; i < items.length; i++) {
						var optionItem = items[i];
						if ((optionItem instanceof Object) && optionItem.hasOwnProperty("k") && optionItem.hasOwnProperty("v")) {
							option = {};
							option.value = String(optionItem.v);
							option.label = String(optionItem.k);
							data.push(option);
						} else {
							continue;
						}
					}
					_this.currentValue = _this.value;
				} else {
					throw new Error("数据类型不匹配");
				}
			},
			error: function () {
				throw new Error("数据请求出错");
			}
		});
	}
});


define('ns-table-column-operate-button',["vue", "nui"], function(Vue, Nui) {
	function createDropItems(createElement, context, btnOpts,prop) {
		var dropMenu = btnOpts.map((item, index, arr) => {
			return createElement("el-dropdown-item", {
				"nativeOn": {
					click: function($event) {
						item.func.call(context,prop);
					}
				}
			}, [item.name])
		});
		
		var dropWrapper = createElement("el-dropdown", {
			props: {
				"trigger": "click",
				"menu-align": "end"
			}
		}, [createElement("span",{
			"class": "el-dropdown-link"
		}, ["更多", createElement("i", {"class": "el-icon-caret-bottom el-icon--right"})]) /*更多*/, 
			createElement("el-dropdown-menu", {
				"slot": "dropdown"
			}, dropMenu) /*下拉选项*/
		]);
		
		return dropWrapper;
	}
	
	function createBtns(createElement, context, btnOpts, prop) {
		return btnOpts.map(x => createElement("el-button", {
			props: {
				"type": "text" //按钮类型： text
			},
			domProps: {
				"innerHTML": x.name //按钮名称
			},
			on: {
				click: function() {
					return x.func.call(context,prop)
				} || function(){}
			}
		}));
	}
	
	Vue.component("ns-table-column-operate-button", {
		props: {
			"prop": {
				type: Object,
				default: function() {
					return new Object();
				}
			},
			
			"buttons": Array
		},
		render: function(createElement){
			var btns = this.buttons;
			var context = this;
			var prop = this.prop;
			var content = [];
			var parentContext = this.$vnode.context;
			function compute(expression) {
				if(expression === undefined || expression === null)
					return true;
				if(typeof expression === "string" && expression.trim() === "")
					return true;
				with(Object.assign({},parentContext, {scope: context.prop})) {
					return eval(expression);
				}
			}
			
			//筛选出被授权并且允许显示的按钮
			var shown = btns.filter(x => {
				return isAuthorize(x.auth, x.code) && compute(x.visible);
			})
			
			var btnLength = shown.length;
			if(btnLength > 1) {
				if(btnLength === 2) {
					content = createBtns(createElement, parentContext, shown, prop);
					content.splice(1, 0, " | ");
				} else {
					var firstBtn = createBtns(createElement, parentContext, [shown[0]], prop);
					var others = createDropItems(createElement, parentContext, shown.slice(1), prop);
					content = [].concat(firstBtn).concat([" | "]).concat(others);
				}
			} else {
				content = createBtns(createElement, parentContext, shown, prop);
			}
			
			var wrapper = createElement("div", {
				"class": "tmp-cell__buttons"
			}, content)
			
			return wrapper;
		}
	})
	
});

define('ns-table-operate-button',["vue", "nui"], function(Vue, Nui) {
	function createDropItems(createElement, context, btnOpts) {
		var dropMenu = btnOpts.map((item, index, arr) => {
			return createElement("el-dropdown-item", {
				"nativeOn": {
					click: function($event) {
						item.func.call(context,context["scope"]);
					}
				}
			}, [item.name])
		});
		
		var dropWrapper = createElement("el-form-grid", [createElement("el-dropdown", {
			props: {
				"trigger": "click",
				"menu-align": "end"
			}
		}, [createElement("el-button",{
			props: {
				"type": "primary"
			}
		}, ["更多菜单", createElement("i", {"class": "el-icon-caret-bottom el-icon--right"})]) /*更多*/, 
			createElement("el-dropdown-menu", {
				"slot": "dropdown"
			}, dropMenu) /*下拉选项*/
		])]);
		
		return dropWrapper;
	}
	
	
	Vue.component("ns-table-operate-button", {
		props: {
			"prop": {
				type: Object,
				default: function() {
					return new Object();
				}
			},
			"buttons": Array
		},
		render: function(createElement) {
			var PRENUM = 5;
			var context = this;
			var parentContext = context.$parent.$vnode.context;
			//筛选出被授权的按钮
			var btns = this.buttons.filter(x => {
				return isAuthorize(x.auth, x.code);
			});
			
			var content = [];
			
			content = btns.slice(0,PRENUM).map(x => {
				return createElement("el-form-grid", [createElement("el-button", {
					props: {
						"type": "primary"
					},
					class: "mb-sm",
					nativeOn: {
						click: function($event) {
							x.func.call(parentContext);
						}
					}
				}, [createElement("i", {
					"class": x.icon
				}), x.name])]);
			})
			
			var others = btns.slice(PRENUM);
			content = content.concat([" "]);
			content = content.concat(
				others.length > 0 
					? createDropItems(createElement, parentContext, btns.slice(PRENUM), {label:"更多菜单"})
					: []
			)
			return createElement("div",{class: 'template-table-buttons'}, content);
		}
	})
});
define('components',["jquery", "vue", "nui"], function ($, Vue, Nui) {
	(function(){
	       //-------------------------------------多选树组件封装
	    var template = `    
	    		 <div class="template-multi">
				                <div class="template-multi-header">
				                  <el-checkbox :indeterminate="isIndeterminate" v-model="checkAll" @change="handleCheckAllChange">{{label}}</el-checkbox>
				                </div>
				                <div class="template-multi-content">
				                  <el-multi
				                    :data="nodes"
				                    accordion
				                    node-key="id"
				                    :default-checked-keys="defaultCheckedKeys"
				                    @check-change="handleCheckChange"
				                    ref="node"
				                    :cols="4"
				                    :show-Selectall="false"
				                    :props="nodesProps">
				                  </el-multi>
				                </div>
				            
				              </div>
			              `
		Vue.component("ns-mutil-select",{
		    template:template,
		    data:function(){
			return {
			    nodesProps: {
				          children: 'children',
				          label: 'label'
			    },
			    checkAll: false, // 线上是否全选
			    isIndeterminate: false,
			}
		    },
		    props:{
		    	nodes:{
	                      type: Array,
	                      default: function () {
	                        return [];
	                      }
		    	},
				label:{
						 type: String,
	                      default: function () {
	                       return'';
	                      }
				},
				defaultCheckedKeys:{
					type:Array,
					  default:function(){
					   return [];
				       }
				},
				defaultCheckedAll:{
					type:Array,
				  default:function(){
				   return [];
			       }
				}

		    },
		    methods:{
		    	// 显示多层级店铺选择器窗口
		        handerlMultilayerVisible () {
		          this.dialogMultilyaerVisible = true;
		          //  需要在body内重新加一层结构
		          document.body.appendChild(this.$refs.dialogMultilyaer.$el);
		        },
		        handleCheckAllChange (event) {
		            this.$refs.node.setCheckedKeys(event.target.checked ? this.defaultCheckedAll : []);
		            this.isIndeterminate = false;
		            this.$emit("input", this.$refs.node.getCheckedNodes());
		          },
		         handleCheckChange (value) {		        	
		            let checkedCount = this.$refs.node.getCheckedNodes().length;
		            this.checkAll = checkedCount === this.defaultCheckedAll.length;
		            this.isIndeterminate = checkedCount > 0 && checkedCount < this.defaultCheckedAll.length;
		            this.$emit("input", this.$refs.node.getCheckedNodes());
		          },
		       
		        getCheckedKeys(){
		            return  this.$refs.node.getCheckedKeys(true);
		        },
		        setCheckedKeys(nodes){
		              this.$refs.node.setCheckedKeys(nodes);
		        }
		       
		    },
		    created:function(){
		     foreachNodes(this.nodes,this.defaultCheckedAll,this.defaultCheckedKeys);
		    	this.isIndeterminate = this.defaultCheckedKeys.length > 0
		    },
		    mounted:function(){
		    	
		    }
		});
			              
		   //遍历所有节点的id
	       function foreachNodes(nodes,nodeKeys,checkedNodes){
	    	   for(var i=0;i<nodes.length;i++){
	    		   nodeKeys.push(nodes[i].id);	     
	    		   if(nodes[i].check && nodes[i].check == true ){
	    			   checkedNodes.push(nodes[i].id);
	    		   }
	    		   if(nodes[i].children&&nodes[i].children.length>0){
	    			   foreachNodes(nodes[i].children,nodeKeys,checkedNodes);
	    		   }
		       
		   		}
	       }
	       
	    
			              
	       
	      
	       
	       //-------------------------------------店铺选择封装
	       var template2 =  `
	       	   <el-form-item label="渠道来源" >
		       <el-form-grid>
		             <el-button type="primary" @click="handerlMultilayerVisible()">选择店铺</el-button>
		       </el-form-grid>
		       <el-form-grid>已选择<b class="text-danger"> {{resultMultilayer}}</b> 家店铺  </el-form-grid>
		  
		   <el-dialog v-cloak title="选择平台" v-model="dialogMultilyaerVisible" @close="dialogMultilyaerVisible=false" ref="dialogMultilyaer" size="small" custom-class="no-padding">
		        <div class="template-multi" v-for="(item,index) in mutlis">        
			      <ns-mutil-select  ref="nodeCheck" v-model="checkedNodes" :label="item.label" :nodes="item.children" ></ns-mutil-select>	
			   </div>
		              <div slot="footer" class="dialog-footer">
					            <el-button @click="dialogMultilyaerVisible = false">取 消</el-button>
					            <el-button type="primary" @click="saveMultilayerSelect">确 定</el-button>
					   </div>
		 </el-dialog>
		        </el-form-item>
	       `
	       
	       Vue.component('ns-shop-select-dialog',{
		    template:template2,
		    data:function(){
			return {
				resultChecks:[],//选择完的所有节点数组
				dialogMultilyaerVisible:false,
				mutlis:[],
				defaultCheckedAll:[], // 全部选中的项
				defaultCheckedKeys:[],
				checkedNodes:[],
				resultMultilayer:''
				}
		    },
		    props:{
		    	
			dataUrl:{
			    type:String,
			    default:function(){
				return '';
			    }
			   }
		    
		    },
		    methods:{
			dialogOpen(){
			    var  nodeChecks = this.$refs.nodeCheck;
			    for(var i=0;i<nodeChecks.length;i++){
				  nodeChecks[i].setCheckedKeys(this.$root.getModel(this.modelName));
			    }
			  
			},
			dialogClose(){
			      var nodeCheckRefs = this.$refs.nodeCheck;
			      var arr = [];
			          for(var i=0;i<nodeCheckRefs.length;i++){
			           arr =  arr.concat(nodeCheckRefs[i].getCheckedKeys());
			          }
			   //  this.$root.setModel(this.modelName,arr);
			       this.resultChecks= arr;
			       this.resultMultilayer = this.resultChecks.length 
			},
			
			      // 显示多层级店铺选择器窗口
			        handerlMultilayerVisible () {
			          this.dialogMultilyaerVisible = true
			          //  需要在body内重新加一层结构
			          document.body.appendChild(this.$refs.dialogMultilyaer.$el)
			        },
			          // 保存选中结果
			        saveMultilayerSelect () {
			         this.dialogClose();
			         // this.resultMultilayer = this.$refs.online.getCheckedNodes().length
			          this.dialogMultilyaerVisible = false;
			          this.$emit('input',this.checkedNodes);
			 
			        },
			       /* setResult(){
			          var nodeCheckRefs = this.$refs.nodeCheck;
			          for(var i=0;i<nodeCheckRefs.length;i++){
			           this.resultChecks =  this.resultChecks.concat(nodeCheckRefs[i].getCheckedkeys());
			          }
			        },*/
			       
		    },
		    created:function(){
			var that = this;
			if(this.dataUrl.length!=0){
			    getNodeData(this.dataUrl).done(function(resp){
			    	that.mutlis = resp.result
			    	        			
			    	           		
			    }).fail(function(resp){
				console.log('节点数据查询失败');
			    });
			}else{
			    throw new Error('dataUrl没赋值');
			}
				for(var i = 0 ; i<this.mutlis.length ;i++){
					foreachNodes(this.mutlis[i].children,this.defaultCheckedAll,this.defaultCheckedKeys);
				}
		    },
		  
		    mounted:function(){ 	
		    	this.resultMultilayer = this.defaultCheckedKeys.length

		    },
		  
		 
	       });
	       
	       function getNodeData(url){
		   var defer =  $.Deferred();
		   $.ajax({url:url,async:false,dataType:"json"}).done(
			   function(resp){
			       defer.resolve(resp);
			   }
		   ).fail(
			    function(resp){
			       defer.reject(resp);
			   }
		   );
		   return defer;
	       }
	})();
	
	(function(){
		var template = `
			<el-form-item :label="label">  
	          <el-form-grid size="xmd">
	          <el-form-item>
	             <el-popover  ref="droptreepopover"
	               v-model="dropTreeVisible"
	                :width="droptreeWidth"
	                placement="bottom-start"
	                trigger="click"
	                popper-class="tmp-droptree-popover">
				   <el-scrollbar
				   wrap-class="tem-droptree-scroll"
				   view-class="template-form-list">
				   <el-tree :data="data"
				   :expand-on-click-node="false"
				   @node-click="handleSelectValue"
				   class="tmp-droptree-tree"></el-tree>
				   </el-scrollbar>
				   </el-popover>
				   <el-input ref="droptreeinput"  v-model="dropTreeValue" readonly  :placeholder="placeholder" v-popover:droptreepopover class="tmp-droptree-input"></el-input>
				   </el-form-item>
				   </el-form-grid>		        
			 </el-form-item>

		`;
		
		var props = {
		
			data:{
			   type: Array
			},
			label: {
				type: String,
				default: '下拉树'
			},
			placeholder:{
				type: String,
				default: '点击选择'
			}
		}
		
		var methods = {
	        handleSelectValue (data) {
	        	this.dropTreeVisible = false
	        	this.dropTreeValue = data.label;
	        	this.$emit("input",this.dropTreeValue);
	        }
		}
		
		Vue.component("ns-select-tree",{
			template:template,
			data:function(){
				return {
			       dropTreeValue:'',
	     	       dropTreeVisible: false,
		           droptreeWidth: ''
				}
			},
			props:props,
			methods:methods,
			mounted:function(){
				
			},
			watch:{
				
			}
		})
	})();
	
	(function(){
		var template = `
			<el-select v-model="currentValue"  ref="nsselect"
						:placeholder="placeholder" 
						:size="size" 
						:disabled="disabled" 
						:multiple="multiple" 
						:multiple-limit="multipleLimit"
						:filterable="filterable"
					   v-on:change="changeHandle" v-on:visible-change="visibleChangeHandle">
				<el-option v-for="item in options" :key="item.value" :label="item.label" :value="item.value"></el-option>
		  	</el-select>
		`;

		Vue.component("ns-select", {
			template: template,
			data: function () {
				return {
					options: [],
					// 双向绑定值-必须
					currentValue: this.value
				}
			},
			props: {
				url: {
					type: String,
					default: ""
				},
				value: {},
				multiple: {
					type: Boolean,
					default: function () {
						return false;
					}
				},
				multipleLimit: {
					type: Number,
					default: function () {
						return 0;
					}
				},
				name: String,
				placeholder: String,
				filterable: {
					type: Boolean,
					default: false
				},
				size: {
					type: String,
					default: ""
				},
				disabled: {
					type: Boolean,
					default: false
				}
			},
			methods: {
				/**
				 * 选中值发生变化时触发
				 * @param val
				 */
				changeHandle: function (val) {
					this.$emit("change", val);
				},
				/**
				 * 下拉框出现/隐藏时触发
				 * @param val
				 */
				visibleChangeHandle: function (val) {
					this.$emit("visible-change", val);
				},
				getText(fun){
			        return this.$refs.nsselect.getText(fun);
				}
			},
			created: function () {
				var _this = this;
				if (this.url) {
					loadOptions(_this, _this.options, _this.url);
				}
			},
			watch: {
				currentValue: function (val) {
					this.$emit('input', val);
				},
				value: function (val) {
					this.currentValue = val;
				}
			}
		});

		// 异步加载下拉数据
		function loadOptions(_this, data, url) {
			$.ajax({
				url: ctx + url,
				async: true,
				success: function (json) {
					var items = json.result;
					if (Array.isArray(items)) {
						var option = {};
						for (var i = 0; i < items.length; i++) {
							var optionItem = items[i];
							if ((optionItem instanceof Object) && optionItem.hasOwnProperty("k") && optionItem.hasOwnProperty("v")) {
								option = {};
								option.value = String(optionItem.v);
								option.label = String(optionItem.k);
								data.push(option);
							} else {
								continue;
							}
						}
						_this.currentValue = _this.value;
					} else {
						throw new Error("数据类型不匹配");
					}
				},
				error: function () {
					throw new Error("数据请求出错");
				}
			});
		}
	})();
	
	(function(){

		// 模板
		var $template = `<el-popover ref="droptreepopover" 
									 v-model="dropTreeVisible"
									 :width="droptreeWidth" 
									 placement="bottom-start" 
									 trigger="click"
									:disabled="disabled"
									 popper-class="tmp-droptree-popover" 
									 @show="popoverShowHandle"
									 @hide="popoverHideHandle">
							<el-input  class="tmp-droptree-search" placeholder="输入关键字进行过滤" v-model="filterText" ></el-input>
							<el-scrollbar wrap-class="tmp-droptree-scroll">
								<el-tree ref="treeStore" class="tmp-droptree-tree"
									:data="treeData"
									:empty-text="emptyText" 
									:node-key="nodeKey" 
									:props="props" 
									:load="load" 
									:render-content="renderContent"
									:highlight-current="highlightCurrent"
									:current-node-key="currentNodeKey"
									:default-expand-all="defaultExpandAll"
									:expand-on-click-node="expandOnClickNode"
									:auto-expand-parent="autoExpandParent"
									:default-expanded-keys="defaultExpandedKeys"
									:show-checkbox="showCheckbox"
									:check-strictly="checkStrictly"
									:default-checked-keys="defaultCheckedKeys"
									:filter-node-method="filterNode"
									:accordion="accordion"
									:indent="indent"
									@node-click="nodeClickHandle"
									@check-change="checkChangeHandle"
									@current-change="currentChangeHandle"
									@node-expand="nodeExpandHandle"
									@node-collapse="nodeCollapseHandle">
								</el-tree>
							</el-scrollbar>
							<el-input type="hidden" style="display: none;" v-model="dropValue"></el-input>
							<el-input type="hidden" style="display: none;" v-model="dropText"></el-input>
							<div class="tmp-droptree-footer">
								<el-button size="mini" type="text" @click="dropTreeVisible=false">取消</el-button>
								<el-button type="primary" size="mini" @click="hideDroptreeHandle">确定</el-button>
							</div>
							<el-input slot="reference" ref="droptreeInput" v-model="showText" :readonly="inputReadOnly" class="tmp-droptree-input" :icon="showText ? 'circle-close' : ''" :placeholder="placeholder"
									:on-icon-click="cleanClickHandle" @click.native="showDropTreeHandle"></el-input>
						 </el-popover>`;

		// 下拉树组件
		Vue.component("ns-droptree", {
			template: $template,
			data: function () {
				return {
					filterText: '',
					showText: '',
					dropValue: '',
					dropText: '',
					dropTreeVisible: false,
					droptreeWidth: ''
				}; 
			},
			props: {
				url: String,
				value: {},
				disabled: Boolean,
		      validateEvent: {
		        type: Boolean,
		        default: true
		      },
				data: {
					type: Array,
					default: function () {
						return [];
					}
				},
				placeholder: {
					type: String,
					default: function () {
						return "请选择";
					}
				},
				emptyText: {
					type: String,
					default: function () {
						return "";
					}
				},
				nodeKey: {
					type: String,
					default: function () {
						return "id";
					}
				},
				checkStrictly: Boolean,
				defaultExpandAll: Boolean,
				expandOnClickNode: {
					type: Boolean,
					default: true
				},
				autoExpandParent: {
					type: Boolean,
					default: true
				},
				defaultCheckedKeys: Array,
				defaultExpandedKeys: Array,
				renderContent: Function,
				showCheckbox: {
					type: Boolean,
					default: false
				},
				props: {
					default: function () {
						return {
							children: 'children',
							label: 'label',
							icon: 'icon'
						};
					}
				},
				lazy: {
					type: Boolean,
					default: false
				},
				highlightCurrent: Boolean,
				currentNodeKey: [String, Number],
				load: Function,
				accordion: Boolean,
				indent: {
					type: Number,
					default: 16
				},
				inputReadOnly: {
					type: Boolean,
					default: true
				}
			},
			computed: {
				"treeData": function(){
					return this.data;
				}
			},
			watch: {
				defaultCheckedKeys: function (newVal) {
					this.$refs.treeStore.defaultCheckedKeys = newVal;
					this.$refs.treeStore.setDefaultCheckedKey(newVal);
				},
				defaultExpandedKeys: function (newVal) {
					this.$refs.treeStore.defaultExpandedKeys = newVal;
					this.$refs.treeStore.setDefaultExpandedKeys(newVal);
				},
				currentNodeKey: function (newVal) {
					this.$refs.treeStore.setCurrentNodeKey(newVal);
					this.$refs.treeStore.currentNodeKey = newVal;
				},
				data: function (newVal) {
					this.$data.data = newVal;
				},
				filterText: function (val) {
					this.$refs.treeStore.filter(val);
				},
				value: function (val){
					this.showText = val.text;
					if (val.value) {
						this.$refs.treeStore.setCheckedKeys(String(val.value).split(','));
					}
				}
			},
			created: function () {
				if (this.url) {
					loadTreeData(this, this.treeData, this.url);
				}
			},
			methods: {
				// 清空选择
				cleanClickHandle: function () {
					this.showText = '';
					this.dropValue = "";
					this.dropText = "";
					this.value.value = "";
					this.value.text = "";
					this.$nextTick(function () {
						this.$refs.treeStore.setCheckedKeys([]);
					});
				},
				showDropTreeHandle: function () {
					this.droptreeWidth = this.$refs.droptreeInput.$el.clientWidth;
				},
				hideDroptreeHandle: function () {
					this.dropTreeVisible = false;
				},
				// tree 方法
				filterNode: function (value, data) {
					if (!value) {
						return true;
					}
					if (data.label) {
						return data.label.indexOf(value) !== -1;
					}
					return false;
				},
				popoverShowHandle:function(){
					
				},
				popoverHideHandle: function () {
					var _this = this;
					setTimeout(function () {
						_this.filterText = '';
					}, 200);
				},
				filter: function (value) {
					if (!this.filterNodeMethod) {
						throw new Error('[Tree] filterNodeMethod is required when filter');
					}
					this.$refs.treeStore.filter(value);
				},
				getNodeKey: function (node, index) {
					const nodeKey = this.nodeKey;
					if (nodeKey && node) {
						return node.data[nodeKey];
					}
					return index;
				},
				getCheckedNodes: function (leafOnly) {
					return this.$refs.treeStore.getCheckedNodes(leafOnly);
				},
				getCheckedKeys: function (leafOnly) {
					return this.$refs.treeStore.getCheckedKeys(leafOnly);
				},
				setCheckedNodes: function (nodes, leafOnly) {
					if (!this.nodeKey) {
						throw new Error('[Tree] nodeKey is required in setCheckedNodes');
					}
					this.$refs.treeStore.setCheckedNodes(nodes, leafOnly);
				},
				setCheckedKeys: function (keys, leafOnly) {
					if (!this.nodeKey) {
						throw new Error('[Tree] nodeKey is required in setCheckedNodes');
					}
					this.$refs.treeStore.setCheckedKeys(keys, leafOnly);
				},
				setChecked: function (data, checked, deep) {
					this.$refs.treeStore.setChecked(data, checked, deep);
				},
				nodeClickHandle: function (nodeData, node, instance) {
					if (!this.showCheckbox && !nodeData.disabled) {
						this.dropTreeVisible = false;
						this.showText = nodeData.label;
						this.dropValue = nodeData.id;
						this.dropText = nodeData.label;
					}
					var obj = {
							value: this.dropValue,
							text: this.dropText
						};
					this.$emit('input', obj);
					this.$emit("node-click", nodeData, node, instance);
				},
				checkChangeHandle: function (nodeData, node, instance) {
					if (this.showCheckbox) {
						var checkArr = this.$refs.treeStore.getCheckedNodes();
						var checkArrLable = [];
						var checkArrId = [];
						for (var i = 0; i < checkArr.length; i++) {
							checkArrLable.push(checkArr[i].label);
							checkArrId.push(checkArr[i].id);
						}
						this.showText = checkArrLable.join(',');
						this.dropValue = checkArrId.join(',');
						this.dropText = checkArrLable.join(',');
					}
					this.$emit("check-change", nodeData, node, instance);
				},
				nodeExpandHandle: function (nodeData, node, instance) {
					this.$emit("node-expand", nodeData, node, instance);
				},
				nodeCollapseHandle: function (nodeData, node, instance) {
					this.$emit("node-collapse", nodeData, node, instance);
				},
				currentChangeHandle: function (nodeData, node) {
					this.$emit("current-change", nodeData, node);
				},//刷新下拉树
				refresh: function(){
					if (this.url && this.url != '' ) {
						
						loadTreeData(this, this.treeData, this.url);
					}
				},
			}
		});

		// 加载tree数据
		function loadTreeData(_this, data, url) {
			$.ajax({
				url: ctx + url,
				async: true,
				success: function (json) {
					data.splice(0);
					var result = json.result;
					// 顶级节点为空，直接从子节点中获取
					if (result instanceof Object && !result.hasOwnProperty("id") && !result.hasOwnProperty("label") && result.hasOwnProperty("children")) {
						$.each(result.children, function (i, val) {
							data.push(val);
						});
					} else if (result instanceof Object && result.hasOwnProperty("id") && result.hasOwnProperty("label")) {
						// 顶级节点不为空
						data.push(result);
					} else if (Array.isArray(result)) {
						// 直接返回多个节点
						$.each(result, function (i, val) {
							data.push(val);
						});
					} else {
						throw new Error("数据类型错误");
					}
					if (_this.value && _this.value.hasOwnProperty('text') && _this.value.hasOwnProperty('value')) {
						_this.showText = _this.value.text;
						if (_this.value.value) {
							_this.$nextTick(function () {
								var keys = String(_this.value.value).split(',');
								_this.$refs.treeStore.setCheckedKeys(keys);
							});
						}
					} else {
						throw new Error("数据初始化值类型错误");
					}
				},
				error: function () {
					throw new Error("数据请求出错");
				}
			});
		}
	})();
});
/**
 * 商品选择组件
 *
 * */
define('ns-goods-select',['jquery', 'vue', 'nui'], function ($, Vue, nui) {

	var $template = `
	 <!-- 选择商品弹窗结构 -->
          <el-dialog title="选择商品" v-model="chooseGoodsVisible"  content-min-height="475px" size="middle" :modal-append-to-body="false" :close-on-click-modal="false" class="g-wrapper" custom-class="condition-dialog" :vetically="true" @close="goodsClose" nesting>
            <div v-loading="goodsLoading" 
                    element-loading-text="拼命加载中">
            <el-row class="tmp-choose__condition"  :gutter="20">
              <el-col :span="15"  class="condition-left" ref="conditionItem">
                <el-form :inline="true" :model="model" ref="goodsForm" >
                  <el-form-item label="商品名称：">
                    <el-form-grid  width="163">
                      <el-input v-model="model.title" placeholder="请输入商品名称"></el-input>
                    </el-form-grid>
                  </el-form-item>
                  <el-form-item label="商家编码：" style="margin-right: 0px;">
                    <el-form-grid  width="163">
                      <el-input v-model="model.outerId" placeholder="请输入商家编码"></el-input>
                    </el-form-grid>
                  </el-form-item>
                  <el-form-item label="商品分类：">
                    <el-form-grid  width="163">
                      <el-popover ref="goodspopover"
											v-model="cateDropTreeVisible"
											:width="droptreeWidth"
											placement="bottom-start"
											trigger="click"
											@show="showPopover"
											@hide="hidePopover"
											popper-class="tmp-droptree-popover">
									<el-input class="tmp-droptree-search" placeholder="输入关键字进行过滤" v-model="goodsFilter" ></el-input>
									<el-scrollbar wrap-class="tmp-droptree-scroll"
												  view-class="template-form-list">
										<el-tree ref="cateDropTreeInGoods"
										:data="dropTreeList" 
										show-checkbox
										node-key="code"
										:expand-on-click-node="false"
										 :filter-node-method="filterNode"
										  class="tmp-droptree-tree"></el-tree>
									</el-scrollbar>
									<div class="tmp-droptree-footer">
										<el-button size="mini" type="text" @click="cateDropTreeVisible=false">取消</el-button>
										<el-button type="primary" size="mini" @click="confirmCheck('cateDropTreeInGoods')">确定</el-button>
									</div>
								</el-popover>
								<el-input ref="goodsDropTreeInput" v-model="model.cateName"  readonly 
								@click.native="handleGoodsShowDropTree"  :icon="model.cateName? 'circle-close':''"
								:on-icon-click="handleIconClick"
								placeholder="请选择" 
								class="tmp-droptree-input" v-popover:goodspopover></el-input>
                    </el-form-grid>
                  </el-form-item>
                  <el-form-item label="商品价格：" style="margin-right: 0px;" prop="price" :rules="[{ validator: goodsPriceValid,trigger:'blur'}]">
                    <el-form-grid  width="163">
                      <el-row>
                        <el-col :span="11">
                          <el-input v-model="model.minPrice" placeholder="最小价格" @keyup.native="limitInput('minPrice')"  class="text-right"></el-input>
                        </el-col>
                        <el-col :span="2" style="text-align:center">~</el-col>
                        <el-col :span="11">
                          <el-input v-model="model.maxPrice" placeholder="最大价格"  @keyup.native="limitInput('maxPrice')"  class="text-right"></el-input>
                        </el-col>
                      </el-row>
                    </el-form-grid>
                  </el-form-item>
                  <el-form-item class="el-block condition-control">
                    <el-form-grid>
                      <el-button type="primary" @click="ns_search">搜索</el-button>
                      <el-button @click="ns_reset">重置</el-button>
                    </el-form-grid>
                  </el-form-item>
                </el-form>
                <el-table ref="goodsTable" :data="goodsData"  @select="selectRow" @select-all="selectAll" :key="ns_pagination.currPage" v-loading="tableLoading"  
                    element-loading-text="拼命加载中">
                  <el-table-column type="selection" width="40" align="center" ></el-table-column>
                  <el-table-column prop="title" label="商品名称" show-overflow-tooltip></el-table-column>
                  <el-table-column prop="outerId" label="商家编码"show-overflow-tooltip width="120"></el-table-column>
                  <el-table-column label="操作" width="60" align="center">
                    <template scope="scope">
                    <el-popover
						  placement="bottom"
						  width="110"
						  trigger="click" >
						  <el-table  :data="goodsSku" :show-header="false" >
                  				<el-table-column label="sku"  width="110">
                  				<template scope="scope"> 					
                  					{{scope.row.skuId}}<br>
                  					库存：{{scope.row.stock}} 价格：{{scope.row.price}}
						  		</template>
						  		</el-table-column>
			          	  </el-table>
						   <el-button 	@click="handleDetails(scope.row)" type="text" slot="reference">SKU筛选</el-button>
						</el-popover>
                    </template>
                  </el-table-column>
                </el-table>
                <el-pagination v-if="ns_pagination.enable"
                  class="template-table-pagination"
                  layout="prev, pager, next"
                  :page-size="ns_pagination.currSize"
                  :current-page="ns_pagination.currPage"
                  :total="ns_pagination.total"
                  @current-change="pageChange">
                </el-pagination>
                </template>
              </el-col>
              <el-col :span="9" class="condition-right">
                <div class="tmp-choose__result">
                  <p class="title">已选择了{{goodsSelectedData.length}}件商品</p>
                  <el-scrollbar ref="tmpChooseScroll"
                                wrap-class="tmp-choose__scroll">
                    <ul class="tmp-choose__goods">
                      <li v-for="(goods,index) in goodsSelectedData">
                        <span class="g-name">{{goods.title}}</span>
                        <a @click="deleteSelectedGoods('goodsSelectedData',index,goods.id)"><i class="g-delete bui-delete"></i></a>
                      </li>
                    </ul>
                  </el-scrollbar>
                </div>
              </el-col>
            </el-row>
            </div>
            <div slot="footer" class="dialog-footer">
              <el-button @click="()=>{ this.chooseGoodsVisible = false}">取 消</el-button>
              <el-button type="primary" @click="saveGoods">确 定</el-button>
            </div>
          </el-dialog>
          <!-- /end 选择商品弹窗结构 -->

	`;

	// 分页对象
	var ns_pagination = {
		enable: true,
		total: 0,
		currPage: 1,
		currSize: 10
	};
	// 排序
	
	var ns_order = {
		orderKey: "create_time",
		orderDir: "desc"
	};


	


	/**
	 * 表格固定方法
	 *
	 */
	var built_in_methods = {
		
		//表格页数条数改变
		sizeChange: function (val) {
			this.ns_pagination.currSize = val;
			this.ns_pagination.currPage = 1;
			this.reload();
		},
		//当前页改变
		pageChange: function (val) {
			this.tableLoading = true;
			this.ns_pagination.currPage = val;
			this.reload();
		},
		//重置分页信息
		resetPagination: function(){
			this.ns_pagination = {
					enable: false,
					total: 0,
					currPage: 1,
					currSize: 10
				};
		},
		search: function (params) {
			this.ns_pagination.currPage = 1;
			this.searchMap = Object.assign({}, params);
			this.reload();
		},
		reload: function () {
			var limit = this.ns_limit;
			var order = this.ns_order;
			var params = Object.assign({}, limit, order, this.searchMap);
			this.ns_table_ajax(params);
		},
		ns_table_ajax: function (params) {
			var _this = this;
			$.post(_this.goodsTableUrl,params).done(function (resp) {
				if (resp.success && resp.result.data.length > 0){
					_this.goodsData = resp.result.data;
					_this.$set(_this.ns_pagination,"total",resp.result.recordsTotal);
					_this.$set(_this.ns_pagination,"enable",true);
				} else {
					_this.goodsData = [];
					_this.$set(_this.ns_pagination,"enable",false);
				}
				_this.$nextTick(function(){
					setTimeout(()=>{				
						_this.goodsLoading = false;
					},200)
					_this.toggleSelection(_this.goodsSelectedData,_this.goodsData);
				})
				_this.tableLoading = false;
				
			}).fail(function (resp) {
				console.log(resp);
				_this.$nextTick(function(){
					setTimeout(()=>{
						_this.goodsLoading = false;
					
					},200)
				})
				_this.tableLoading = false;
			});
		},
		ns_search: function () {
			var params = {
				searchMap: {
					title: this.model.title,
					outerId: this.model.outerId,
					minPrice: this.model.minPrice,
					maxPrice: this.model.maxPrice,
					cate: this.model.cate
				}
			}
			this.search(params);
		},
		// 重置查询条件
		ns_reset: function () {
			this.$set(this,"model",this.$options.data().model);
			this.searchMap = {};
			this.reload();
		},
	}

	/**
	 * 数据对象
	 *
	 */
	var $data = function(){
		return {
			goodsData: [],//商品列表数据
			chooseGoodsVisible: false, 
			model:{
				title: "",
				outerId: "",
				cate:"",
				cateName: "",
				minPrice: null,
				maxPrice: null
			},
			goodsFilter: "", //商品分类下拉树过滤文本
			goodsSelectedData: [], // 选中的商品表格数据
			confirmGoodsData: [], //确认选择的商品数据
			ns_pagination: ns_pagination, // 分页参数
			ns_order: ns_order, // 排序
			custom: "custom",
			searchMap: {},
			goodsTableUrl: ctx + "/base/common/queryKdGoodsList",
			goodsCategoryUrl: ctx+"/base/common/loadGoodsCategoryTree",
			goodsDetailsUrl: ctx+ "/base/common/queryGoodsSkuList",
			goodsSku: [],
			// 下拉树配置项：
			cateDropTreeVisible: false,
			dropTreeList: [],
			droptreeWidth: '',
			// 下拉树配置项/end
			goodsLoading: true,
			tableLoading: false,
		}
	};
	
	var props = {
		goods: {
			type: Array,
			default: function(){
				return []
			}
		},
		goodsMaxCount: {
			type: Number,
			default: function(){
				return 500;
			}
		}
	};

	/**
	 * 自定义方法
	 * 
	 */
	var $methods = {
		//删除已选择商品
		deleteSelectedGoods: function($dataName,index,id){
			this.$data[$dataName].splice(index,1);
			//表格是否渲染
			if(this.$refs.goodsTable){
				for(var i = 0; i < this.goodsData.length; i++ ){
					if(id === this.goodsData[i].id){
						this.$refs.goodsTable.toggleRowSelection(this.goodsData[i],false);
						break;
					}
				}
			}
		},
		//外部调用删除
		deleteGoods: function(data){
			this.deleteSelectedGoods('goodsSelectedData',data);
			this.$set(this,'confirmGoodsData',this.goodsSelectedData);
		},
		//显示浮层时触发
		showPopover(){
			if(this.model.cate && this.model.cate != '')
				this.$refs.cateDropTreeInGoods.setCheckedKeys(String(this.model.cate).split(','));
		},
		//隐藏浮层
		hidePopover(){
			if(this.model.cate && this.model.cate != '')
				this.$refs.cateDropTreeInGoods.setCheckedKeys([]);
		},
		//价格验证
    	 goodsPriceValid(rule,val,callback){
    		 if(parseInt(this.model.minPrice) > parseInt(this.model.maxPrice)){
     			callback(new Error(" "));
     			this.$notify.warning("最小价格不能大于最大价格");
     		}
     		else
     			callback();
    	 },
    	 //价格限制输入
    	 limitInput(name){
    		 this.model[name]= this.LimitInputNumber(this.model[name]);	
    	 },
    	 //输入大于零小数点只有两位得数字
    	 LimitInputNumber(data){
    		 data = data.replace(/[^\d\.]/g,'');
    		 var index = data.indexOf('.');
    		 if(index != -1){
    			 data = data.substring(0,index+1)+data.substr(index+1,2).replace(/[^\d]/g,'');
    		 }
    		 return data;
    	 },
		// tree 方法
		filterNode: function (value, data) {
			if (!value) {
				return true;
			}
			if (data.label) {
				return data.label.indexOf(value) !== -1;
			}
			return false;
		},
		//打开选择商品弹窗
		showChooseGoods: function(){
			this._init();
			this.chooseGoodsVisible = true;
			this.$set(this,'goodsSelectedData',[].concat(this.confirmGoodsData));
		},
		open: function(){
			this.showChooseGoods();
		},
		// 初始化方法
		_init: function () {
			this.ns_search();
			this.resetPagination();
			this.initDropTree();
			this.$set(this,"searchMap",{});
		},
		
		/**
		 * 关闭
		 */
		goodsClose: function () {
			this.$set(this,"model",this.$options.data().model);
			this.$data.goodsVisible = false;
			this.goodsLoading =true;
		},
		//保存商品
		saveGoods: function(){
			var goods = this.$data.goodsSelectedData
			if(goods.length > this.goodsMaxCount){
				this.$notify.warning("最多选择"+this.goodsMaxCount+"件商品");
			}else{
				this.$set(this,'confirmGoodsData',goods);
				this.callback();
				this.$data.chooseGoodsVisible = false;
			}
		},
		/**
		 * 回调
		 */
		callback: function () {
			var opts = {
				goods: this.handleGoodsData(this.confirmGoodsData),
			};
			this.$emit('callback', opts);
		},
		// 选择商品下拉树 
		handleGoodsShowDropTree: function () {
			this.droptreeWidth = this.$refs.goodsDropTreeInput.$el.clientWidth;
		},
		//下拉树确定选中
		confirmCheck: function(dropTree){
			var checkArr = [];
			checkArr = this.$refs[dropTree].getCheckedNodes();
			var checkArrLabel = [];
			var checkArrCode = [];
			for (var i = 0; i < checkArr.length; i++) {
				checkArrLabel.push(checkArr[i].label);
				checkArrCode.push(checkArr[i].code);
			}
			var cate=checkArrCode.join(',');
			this.model.cateName = checkArrLabel.join(',');
			this.model.cate = cate; 
			this.cateDropTreeVisible = false;
		},
		// 初始化商品分类下拉树
		initDropTree: function () {
			var _this = this;
			$.post(_this.goodsCategoryUrl).done(function (resp) {
				if (resp.success && resp.result) {
					_this.dropTreeList = resp.result;
				} else {
					_this.dropTreeList = [];
				}
			}).fail(function (resp) {
				console.log(resp);
			});
		},
		//点击下拉树输入框图标触发
	   	 handleIconClick(){
	   		 this.model.cateName = '';
	   		 this.model.cate = '';
	   	 },
		//商品详情
		handleDetails: function(data){
			var _this = this;
			$.post(_this.goodsDetailsUrl,{sysItemId: data.sysItemId,outerId: data.outerId,title: data.title}).done(function (resp) {
				if (resp.success && resp.result.length> 0) {
					_this.$set(_this,"goodsSku",resp.result);
				} else {
					console.log(resp);
				}
			}).fail(function (resp) {
				console.log(resp);
			});
		},
	
		//数组去重
		uniqueArray: function (array){ 
			var r = []; 
			for(var i = 0, l = array.length; i < l; i++) { 
				for(var j = i + 1; j < l; j++) 
					if (array[i].id === array[j].id)
						j = ++i; 
						r.push(array[i]); 
			} 
			return r; 
		},
	
		//处理返回的商品数据
		handleGoodsData: function(data){
			var goods = [];
			data.map((item,index)=>{
				goods.push({
					id:item.id,
					title:item.title,
					price:item.price,
					pictureUrl:item.pictureUrl
				});
			})
			return goods;
		},
		resetData: function(){
			this.$set(this,"goodsSelectedData",this.$options.data().goodsSelectedData);
			this.$set(this,"confirmGoodsData",this.$options.data().confirmGoodsData);
		},
		toggleSelection: function(selected,rows){
			for(var i = 0; i<rows.length; i++){
				for(var j = 0; j<selected.length; j++){
					if(rows[i].id == selected[j].id ){
						this.$refs.goodsTable.toggleRowSelection(rows[i],true);
						break;
					}
				}
			}
		},
		//选中某行
		selectRow: function(selected,row){
			var showSelectedList = this.goodsSelectedData;
			var check = false;
			for(var i = 0; i< selected.length; i++){
				if(selected[i].id == row.id){
					check = true;
					break;
				}
			}
			if(check){
				showSelectedList.push(row);
			}else{
				//删除未勾选商品数据
				for(var j = 0; j < showSelectedList.length; j++){
					if(showSelectedList[j].id == row.id){
						this.deleteSelectedGoods('goodsSelectedData',j,showSelectedList[j].id);
						break;
					}
				}
			}
		},
		//表格选择所有
		selectAll: function(selected){
			var goodsList = this.goodsData;
			var selectList = this.goodsSelectedData;
			if(selected.length == 0){
				for(var i = 0; i< goodsList.length; i++)
					this.selectRow(selected,goodsList[i]);
			}else{
				this.goodsSelectedData =this.uniqueArray(this.goodsSelectedData.concat(selected));
			}
		},
	};
	var computed = {
			"ns_limit": function(){
				return {
					start: (this.ns_pagination.currPage-1)*this.ns_pagination.currSize,
					length: this.ns_pagination.currSize
				}
			}
		};
	var watch = {
		"goodsFilter": function(val){
			this.$refs.cateDropTreeInGoods.filter(val);
		},
		
		"goods": function(val){
			if(val instanceof Array){
				this.$set(this,"goodsSelectedData",[].concat(val));
				this.$set(this,"confirmGoodsData",[].concat(val));
			}else{
				throw new Error("商品数据类型初始化错误");
			}
			
		}
		
		

	};
	// 商品选择组件定义
	Vue.component("ns-goods-select", {
		template: $template,
		data: $data,
		methods: Object.assign(built_in_methods, $methods),
		props: props,
		computed: computed,
		watch: watch
	});

});
/**
 * 
 */
define('render-helper',[], function(){
	var helper = {};
	/**
	 * @param Array[Object] | Object
	 * 			-type dsl类型(form|table)
	 * 			-code dsl编码
	 * 			-subffix 组件后缀
	 * 			-dep 组件依赖
	 * @param opts 参数同异步组件的参数 https://cn.vuejs.org/v2/guide/components.html#异步组件
	 * @param resolver
	 * */
	function loadComponent(args, opts, resolver) {
		var sb = "";
		var compNameArr = [];
		if(Array.isArray(args)) {
			var codeArr = [];
			var subffixArr = [];
			var depArr = [];
			args.map(x=> {
				x.code ? codeArr.push(x.code) : codeArr.push("");
				x.subffix ? subffixArr.push(x.subffix) : subffixArr.push("");
				x.dep ? depArr.push(x.dep) : depArr.push("");
				var compName = x.type === "table" ? `ns-designer-table-${x.subffix}` : `ns-designer-form-${x.subffix}`;
				compNameArr.push(compName);
			})
			var codeStr = codeArr.join("$");
			var subffixStr = subffixArr.join("$");
			var depStr = depArr.join("$");
			sb = `code=${codeStr}&subffix=${subffixStr}&dep=${depStr}`;
		} else if(typeof args === "object") {
			var x = {};
			x.code = args.code ? args.push(args.code) : args.push("");
			x.subffix =  args.subffix ? args.push(args.subffix) : args.push("");
			x.dep = args.dep ? args.push(args.dep) : args.push(" ");
			sb = `code=${x.code}&subffix=${x.subffix}&dep=${x.dep}`;
			var compName = x.type === "table" ? `ns-designer-table-${x.subffix}` : `ns-designer-form-${x.subffix}`;
			compNameArr = [compName];
		} else {
			throw new Error("illegal arguments exception");
		}
		
		require(["/base/designer/renderTemplate?"+sb], function() {
			require(compNameArr,function(){
				resolver(opts);
			})
		})
	} 
	helper.loadComponent = loadComponent;
	
	return helper;
});




/**
 * 下拉树
 *
 * @author Adolph Zheng
 */
define('ns-droptree',["jquery", "vue", "nui"], function ($, Vue, Nui) {

	// 模板
	var $template = `<el-popover ref="droptreepopover" 
								 v-model="dropTreeVisible"
								 :width="droptreeWidth" 
								 placement="bottom-start" 
								 trigger="click"
								 popper-class="tmp-droptree-popover" 
								 @hide="popoverHideHandle">
						<el-input class="tmp-droptree-search" placeholder="输入关键字进行过滤" v-model="filterText" ></el-input>
						<el-scrollbar wrap-class="tmp-droptree-scroll">
							<el-tree ref="treeStore" class="tmp-droptree-tree"
								:data="treeData"
								:empty-text="emptyText" 
								:node-key="nodeKey" 
								:props="props" 
								:load="load" 
								:render-content="renderContent"
								:highlight-current="highlightCurrent"
								:current-node-key="currentNodeKey"
								:default-expand-all="defaultExpandAll"
								:expand-on-click-node="expandOnClickNode"
								:auto-expand-parent="autoExpandParent"
								:default-expanded-keys="defaultExpandedKeys"
								:show-checkbox="showCheckbox"
								:check-strictly="checkStrictly"
								:default-checked-keys="defaultCheckedKeys"
								:filter-node-method="filterNode"
								:accordion="accordion"
								:indent="indent"
								@node-click="nodeClickHandle"
								@check-change="checkChangeHandle"
								@current-change="currentChangeHandle"
								@node-expand="nodeExpandHandle"
								@node-collapse="nodeCollapseHandle">
							</el-tree>
						</el-scrollbar>
						<el-input type="hidden" style="display: none;" v-model="dropValue"></el-input>
						<el-input type="hidden" style="display: none;" v-model="dropText"></el-input>
						<div  class="tmp-droptree-footer">
							<el-button v-if="showCheckbox" size="mini" type="text" @click="dropTreeVisible=false">取消</el-button>
							<el-button  v-if="showCheckbox" type="primary" size="mini" @click="hideDroptreeHandle">确定</el-button>
						</div>
						<el-input slot="reference" ref="droptreeInput" v-model="showText" :readonly="inputReadOnly" class="tmp-droptree-input" :icon="showText ? 'circle-close' : ''" :placeholder="placeholder"
								:on-icon-click="cleanClickHandle" @click.native="showDropTreeHandle"></el-input>
					 </el-popover>`;

	// 下拉树组件
	Vue.component("ns-droptree", {
		template: $template,
		data: function () {
			return {
				filterText: '',
				showText: '',
				dropValue: '',
				dropText: '',
				dropTreeVisible: false,
				droptreeWidth: ''
			}; 
		},
		props: {
			url: String,
			value: {},
	      validateEvent: {
	        type: Boolean,
	        default: true
	      },
			data: {
				type: Array,
				default: function () {
					return [];
				}
			},
			placeholder: {
				type: String,
				default: function () {
					return "请选择";
				}
			},
			emptyText: {
				type: String,
				default: function () {
					return "";
				}
			},
			nodeKey: {
				type: String,
				default: function () {
					return "id";
				}
			},
			checkStrictly: Boolean,
			defaultExpandAll: Boolean,
			expandOnClickNode: {
				type: Boolean,
				default: true
			},
			autoExpandParent: {
				type: Boolean,
				default: true
			},
			defaultCheckedKeys: Array,
			defaultExpandedKeys: Array,
			renderContent: Function,
			showCheckbox: {
				type: Boolean,
				default: false
			},
			props: {
				default: function () {
					return {
						children: 'children',
						label: 'label',
						icon: 'icon'
					};
				}
			},
			lazy: {
				type: Boolean,
				default: false
			},
			highlightCurrent: Boolean,
			currentNodeKey: [String, Number],
			load: Function,
			accordion: Boolean,
			indent: {
				type: Number,
				default: 16
			},
			inputReadOnly: {
				type: Boolean,
				default: true
			}
		},
		computed: {
			"treeData": function(){
				return this.data;
			}
		},
		watch: {
			defaultCheckedKeys: function (newVal) {
				this.$refs.treeStore.defaultCheckedKeys = newVal;
				this.$refs.treeStore.setDefaultCheckedKey(newVal);
			},
			defaultExpandedKeys: function (newVal) {
				this.$refs.treeStore.defaultExpandedKeys = newVal;
				this.$refs.treeStore.setDefaultExpandedKeys(newVal);
			},
			currentNodeKey: function (newVal) {
				this.$refs.treeStore.setCurrentNodeKey(newVal);
				this.$refs.treeStore.currentNodeKey = newVal;
			},
			data: function (newVal) {
				this.$data.data = newVal;
			},
			filterText: function (val) {
				this.$refs.treeStore.filter(val);
			},
			dropValue: function (val) {
				var obj = {
					value: val,
					text: this.dropText
				};
				this.$emit('input', obj);
			},
			dropText: function (val) {
				var obj = {
					value: this.dropValue,
					text: val
				};
				this.$emit('input', obj);
			},
			value: function (){
				this.showText = this.value.text;
				if (this.value.value) {
					this.$refs.treeStore.setCheckedKeys(String(this.value.value).split(','));
				}else{
					this.$refs.treeStore.setCheckedKeys([]);
				}
			}
		},
		created: function () {
			if (this.url) {
				loadTreeData(this, this.treeData, this.url);
			}
		},
		
		methods: {
			// 清空选择
			cleanClickHandle: function () {
				this.showText = '';
				this.dropValue = "";
				this.dropText = "";
				this.value.value = "";
				this.value.text = "";
				this.$nextTick(function () {
					this.$refs.treeStore.setCheckedKeys([]);
				});
			},
			//刷新下拉树
			refresh: function(){
				if (this.url && this.url != '' ) {
					loadTreeData(this, this.treeData, this.url);
				}
			},
			showDropTreeHandle: function () {
				this.droptreeWidth = this.$refs.droptreeInput.$el.clientWidth;
			},
			//确定选择
			hideDroptreeHandle: function () {
				if (this.showCheckbox) {
					var checkArr = this.$refs.treeStore.getCheckedNodes();
					var checkArrLable = [];
					var checkArrId = [];
					for (var i = 0; i < checkArr.length; i++) {
						//设置是否可以选择，特殊场景
						if(!checkArr[i].disabled){
							checkArrLable.push(checkArr[i].label);
							checkArrId.push(checkArr[i][this.nodeKey]);
						}
					}
					this.showText = checkArrLable.join(',');
					this.dropValue = checkArrId.join(',');
					this.dropText = checkArrLable.join(',');
				}
				this.dropTreeVisible = false;
			},
			// tree 方法
			filterNode: function (value, data) {
				if (!value) {
					return true;
				}
				if (data.label) {
					return data.label.indexOf(value) !== -1;
				}
				return false;
			},
			popoverHideHandle: function () {
				var _this = this;
				setTimeout(function () {
					_this.filterText = '';
				}, 200);
			},
			filter: function (value) {
				if (!this.filterNodeMethod) {
					throw new Error('[Tree] filterNodeMethod is required when filter');
				}
				this.$refs.treeStore.filter(value);
			},
			getNodeKey: function (node, index) {
				const nodeKey = this.nodeKey;
				if (nodeKey && node) {
					return node.data[nodeKey];
				}
				return index;
			},
			getCheckedNodes: function (leafOnly) {
				return this.$refs.treeStore.getCheckedNodes(leafOnly);
			},
			getCheckedKeys: function (leafOnly) {
				return this.$refs.treeStore.getCheckedKeys(leafOnly);
			},
			setCheckedNodes: function (nodes, leafOnly) {
				if (!this.nodeKey) {
					throw new Error('[Tree] nodeKey is required in setCheckedNodes');
				}
				this.$refs.treeStore.setCheckedNodes(nodes, leafOnly);
			},
			setCheckedKeys: function (keys, leafOnly) {
				if (!this.nodeKey) {
					throw new Error('[Tree] nodeKey is required in setCheckedNodes');
				}
				this.$refs.treeStore.setCheckedKeys(keys, leafOnly);
			},
			setChecked: function (data, checked, deep) {
				this.$refs.treeStore.setChecked(data, checked, deep);
			},
			nodeClickHandle: function (nodeData, node, instance) {
				if (!this.showCheckbox && !nodeData.disabled) {
					this.showText = nodeData.label;
					this.dropValue = nodeData[this.nodeKey];
					this.dropText = nodeData.label;
					this.dropTreeVisible = false;
				}
				var obj = {
						value: this.dropValue,
						text: this.dropText
					};
				this.$emit('input', obj);
				this.$emit("node-click", nodeData, node, instance);
			},
			checkChangeHandle: function (nodeData, node, instance) {
				this.$emit("check-change", nodeData, node, instance);
				
			},
			nodeExpandHandle: function (nodeData, node, instance) {
				this.$emit("node-expand", nodeData, node, instance);
			},
			nodeCollapseHandle: function (nodeData, node, instance) {
				this.$emit("node-collapse", nodeData, node, instance);
			},
			currentChangeHandle: function (nodeData, node) {
				this.$emit("current-change", nodeData, node);
			},
		    getText(format){
		    	return this.$refs.droptreeInput.getText(format);
		    }
		}
	});

	// 加载tree数据
	function loadTreeData(_this, data, url) {
		$.ajax({
			url: ctx + url,
			async: true,
			success: function (json) {
				data.splice(0);
				var result = json.result;
				// 顶级节点为空，直接从子节点中获取
				if (result instanceof Object && !result.hasOwnProperty(_this.nodeKey) && !result.hasOwnProperty("label") && result.hasOwnProperty("children")) {
					$.each(result.children, function (i, val) {
						data.push(val);
					});
				} else if (result instanceof Object && result.hasOwnProperty(_this.nodeKey) && result.hasOwnProperty("label")) {
					// 顶级节点不为空
					data.splice(0,1,result);
				} else if (Array.isArray(result)) {
					// 直接返回多个节点
					$.each(result, function (i, val) {
						data.push(val);
					});
				} else {
					throw new Error("数据类型错误");
				}
				if (_this.value && _this.value.hasOwnProperty('text') && _this.value.hasOwnProperty('value')) {
					_this.showText = _this.value.text;
					if (_this.value.value) {
						_this.$nextTick(function () {
							var keys = String(_this.value.value).split(',');
							_this.$refs.treeStore.setCheckedKeys(keys);
						});
					}
				} else {
					throw new Error("数据初始化值类型错误");
				}
			},
			error: function () {
				throw new Error("数据请求出错");
			}
		});
	}

});




/**
 * 品牌组件封装
 *
 * @author adolph
 */
define('ns-brand-multi-select',["jquery", "vue", "nui"], function ($, Vue, Nui) {

	var template = `
		<div class="template-multi">
			<div class="template-multi-content">
				<el-multi :data="nodes" leaf-check-limit accordion node-key="code" :default-checked-keys="defaultCheckedKeys" :set-position="36"
					@check-change="checkChangeHandle" ref="shopNode" :cols="2" :show-Selectall="false" :props="shopProps">
				</el-multi>
			</div>
        </div>
	`;

	// 单个选择组件注册
	Vue.component("ns-one-multi-select", {
		template: template,
		data: function () {
			return {
				shopProps: {
					children: 'children',
					label: 'label',
					appoint: 'showAdd'
				},
				checkAll: false, // 线上是否全选
				isIndeterminate: false
			};
		},
		props: {
			// 节点数据
			nodes: {
				type: Array,
				default: function () {
					return [];
				}
			},
			// 默认选中的项
			defaultCheckedKeys: {
				type: Array,
				default: function () {
					return [];
				}
			},
			// 全部选中的项
			defaultCheckedAll: {
				type: Array,
				default: function () {
					return [];
				}
			}
		},
		methods: {
			/**
			 * 全选
			 * @param event
			 */
			checkAllChangeHandle: function (event) {
				this.$refs.shopNode.setCheckedKeys(event.target.checked ? this.defaultCheckedAll : []);
				this.isIndeterminate = false;
			},
			checkChangeHandle: function (value) {
				let checkedCount = this.$refs.shopNode.getCheckedNodes().length;
				this.checkAll = checkedCount === this.defaultCheckedAll.length;
				this.isIndeterminate = checkedCount > 0 && (checkedCount < this.defaultCheckedAll.length);
			},
			/**
			 * 目前被选中的节点所组成的数组
			 * @returns {*}
			 */
			getCheckedKeys: function () {
				return this.$refs.shopNode.getCheckedKeys();
			},
			/**
			 * 目前被选中的节点所组成的数组
			 * @returns {*}
			 */
			getCheckedNodes: function () {
				return this.$refs.shopNode.getCheckedNodes();
			},
			/**
			 * 通过 keys 设置目前勾选的节点，使用此方法必须设置 node-key 属性
			 * @param keys
			 * @param leafOnly
			 */
			setCheckedKeys: function (keys, leafOnly) {
				this.$refs.shopNode.setCheckedKeys(keys, leafOnly);
			}
		},
		created: function () {

		},
		mounted: function () {

		}
	});

	var $template = `
		<el-dialog :title="title" v-model="dialogBrandMultilyaerVisible" size="tiny" height="400px" :vetically="true" custom-class="no-padding" :modal-append-to-body="false" :close-on-click-modal="false">
			<div class="template-multi">
				<el-collapse v-model="activeNames" accordion>
					<el-collapse-item :name="node.code" v-for="(node,index) in nodes" :key="index">
						<template slot="title">
						  {{node.label}}
						</template>
						<ns-one-multi-select :ref="node.ref" :default-checked-all="defaultCheckedAll" :nodes="node.children" :default-checked-keys="defaultCheckedKeys"></ns-one-multi-select>
					</el-collapse-item>
				</el-collapse>
			</div>
			<div slot="footer" class="dialog-footer">
				<el-button @click.native="dialogBrandMultilyaerVisible=false">取 消</el-button>
				<el-button type="primary" @click.native="callback">确 定</el-button>
			</div>
		</el-dialog>
	`;

	/**
	 * 初始化
	 * @param _this
	 */
	function _init(_this, args, params) {
		_this.$data.refKeys = [];
		_this.$data.defaultCheckedAll = args.defaultCheckedAll;
		// 加载店铺数据
		$.post(_this.url, params?params:{}).done(function (resp) {
			_this.nodes = resp.result.children ? resp.result.children: [];
			_this.$data.defaultCheckedKeys = args.defaultCheckedKeys;
			// 默认展开第一个面板
			if (resp.result.children) {
				_this.activeNames = resp.result.children[0].code;
			}
			for (var i = 0; i < resp.result.children.length; i++) {
				_this.refKeys.push(resp.result.children[i].ref);
			}
		}).fail(function (resp) {
			console.log(resp);
		});
	}

	// 品牌店铺主键
	Vue.component("ns-brand-multi-select", {
		template: $template,
		data: function () {
			return {
				activeNames: "",
				dialogBrandMultilyaerVisible: false,
				refKeys: [],
				nodes: [],
				defaultCheckedKeys: [], // 默认选中的项
				defaultCheckedAll: [], // 全部选中的项
                shopNames:[]
			};
		},
		props: {
			url: {
				type: String,
				default: function () {
					return ctx + "/base/common/queryShopTree";
				}
			},
			title: {
				type: String,
				default: "选择店铺"
			}
		},
		methods: {
			/**
			 * 打开方法
			 * @param opts
			 */
			open: function (args,params) {
				var _this = this;
				_this.$data.dialogBrandMultilyaerVisible = true;
				_init(_this, args,params);
			},
			/**
			 * 确定触发回调函数
			 */
			callback: function () {
				var data = [];
				var refs = this.$refs;
                this.shopNames = [];
				var refKeys = this.$data.refKeys;
				var checkedNodes = []
				for (var i = 0; i < refKeys.length; i++) {
					var refsKey = refKeys[i];
					var vue = refs[refsKey][0];
					checkedNodes = checkedNodes.concat(vue.getCheckedNodes());
				}
				for (var i = 0; i < checkedNodes.length; i++) {
					var checkedNode = checkedNodes[i];
					if(checkedNode.showAdd){
						data.push(checkedNode.code);
                        this.shopNames.push(checkedNode.label);
					}
				}
				var args = {
					data: data
				};
				this.$emit("callback", args);
				this.$data.dialogBrandMultilyaerVisible = false;
			},
            //获取选中店铺名称
            getText:function(){
                return this.shopNames.join(",");
            }
		},
		created: function () {
			
		},
		mounted: function () {

		}
	});
});		


(function() {
	//请求成功
	var checkSuccess = function (resp,vue,info,successFun){
		vue.$message({
			type: "success",
			message: resp.msg || info+"成功"
		}); 
		if(successFun)
			successFun();
	}
	//请求失败
	var checkFail = function (resp,vue,info,failFun){
		vue.$message.error(resp.msg || info+"失败");
		if(failFun)
			failFun();
	}
	
	this.ResponseUtil = class {
		/**
		 * 检查是否成功响应
		 * resp 返回的CommonResult对象
		 * vue 
		 * info 提示信息， info == "" 不弹出提示信息
		 * resp.success为true 时，执行successFun函数，否则执行failFun函数
		 * 		 */
		static check(resp,vue,info,successFun,failFun) {
			//是否成功
			if(resp.success){
				if( successFun && info == ""){
					successFun();
				}else if(successFun && !(successFun instanceof Function))			
					throw new Error("第4个参数必须为Funciton类型或者不传此参数！");
				else if(!info || info != "")
					checkSuccess(resp,vue,info,successFun);	
			}else{
				if(failFun && info == ""){
					failFun();
				}else if(failFun && !(failFun instanceof Function))
					throw new Error("第5个参数必须为Funciton类型或者不传此参数！");
				else if(!info || info != "")
					checkFail(resp,vue,info,failFun);
			}			
		}
	}
	return ResponseUtil;
})(this)
;
define("response-util", function(){});

/**
 * 级联选择器
 *
 * @author Adolph
 */
define('ns-cascader',["jquery", "vue", "nui"], function ($, Vue, Nui) {

	var $template = `
		<el-cascader
		  ref="compCascader"
		  :options="options"
		  :props="defalutProps"
		  v-model="currentValue"
		  :empty-text="emptyText"
		  :placeholder="placeholder"
		  :disabled="disabled"
		  :clearable="clearable"
		  :change-on-select="changeOnSelect"
		  :popper-class="popperClass"
		  :expand-trigger="expandTrigger"
		  :filterable="filterable"
		  :size="size"
		  :show-all-levels="showAllLevels"
		  :debounce="debounce"
		  :before-filter="beforeFilter"
		  @change="handleChange"
		  @active-item-change="handleActiveItemChange"
		></el-cascader>
	`;

	Vue.component("ns-cascader", {
		template: $template,
		props: {
			url: {
				type: String,
				default: function(){
					return "/base/common/queryGradeInBrand";
				}
			},
		    value: String,
		    placeholder: String,
		    disabled: Boolean,
		    clearable: {
		      type: Boolean,
		      default: false
		    },
		    changeOnSelect: Boolean,
		    popperClass: String,
		    expandTrigger: {
		      type: String,
		      default: 'click'
		    },
		    filterable: Boolean,
		    size: String,
		    showAllLevels: {
		      type: Boolean,
		      default: true
		    },
		    debounce: {
		      type: Number,
		      default: 300
		    },
		    beforeFilter: {
		      type: Function,
		      default: () => (() => {})
		    }
		},
		data: function () {
			return {
				options: [],
				// 双向绑定值-必须
				currentValue: [],
				defalutProps: {
					children: 'children',
			          label: 'label',
			          value: 'value',
			          disabled: 'disabled'
				},
				emptyText:"暂无数据"
			}
		},
		methods: {
			handleChange(currentVal){
				this.$emit('change', currentVal);
				this.$emit('input', currentVal[1]);
			},
		    handleActiveItemChange(value) {
		      this.$emit('active-item-change', value);
		    },
		    getText(format){
		    	return this.$refs.compCascader.getText(format);
		    },
		    setCurrentValue(val){
		    	var hasValue = false;
				for(var i = 0; i < this.options.length ;i++){
					var child = this.options[i].children ? this.options[i].children : []
					for(var j = 0; j < child.length ;j++){
						if(child[j].value == val){
							this.currentValue = [this.options[i].value,val];
							var hasValue = true;
							break;
						}	
					}
				}
				if(!hasValue){
					this.currentValue = [];
				}
		    }
		    
		
		},
		
		created: function () {
			var _this = this;
			if (this.url) {
				loadOptions(_this, _this.options, _this.url);
			}
		},
		watch: {
			value(val){
				this.setCurrentValue(val);
			}
		}
	});

	// 异步加载下拉数据
	function loadOptions(_this, data, url) {
		$.ajax({
			url: ctx + url,
			async: true,
			success: function (resp) {
				if(resp.success){
					var result = resp.result;
					if (Array.isArray(result)) {
						// 直接返回多个节点
						$.each(result, function (i, val) {
							data.push(val);
						});
					} else {
						throw new Error("数据类型错误");
					}
				}else{
					throw new Error("数据请求出错");
				}
				if(_this.value && _this.value != ""){
					_this.setCurrentValue(_this.value);
				}
			},
			error: function () {
				throw new Error("数据请求出错");
			}
		});
	}
});
define('event-manager',[], function() {
	if(this.EventManager === undefined) {
		this.EventManager = (function(fac) {
			var dataCache = {};
			var listeners = {};
			
			function hasOwnProperty(obj, ...props) {
				for(var i = 0; i < props.length; i++) {
					if(obj.hasOwnProperty(props[i])) {
						obj = obj[props[i]];
					} else 
						return false;
				}
				return true;
			}
			
			function afterRegister(id, type, handler) {
				if(type === "$dispatch") {
					if(hasOwnProperty(dataCache, id)) {
						var cache = dataCache[id];
						var types = Object.keys(dataCache[id]);
						for(var i = 0; i < types.length; i++) {
							if(listeners[id]["$dispatch"]({type: types[i], data:cache[types[i]]})) {
								if(hasOwnProperty(dataCache, id, types[i]))
									delete dataCache[id][types[i]];
							}
						}
					}
				} else {
					if(hasOwnProperty(dataCache, id, type)) {
						handler(dataCache[id][type]);
						delete dataCache[id][type];
					}
				}
			}
	
			var EventManager = {
				/**
				 * 事件注册
				 * @param id 唯一标识
				 * @param type 事件类型
				 * @param handler 处理方法
				 */
				register: function(id, type, handler) {
					if(hasOwnProperty(listeners, id, type)) {
						listeners[id][type] = handler;
					} else {
						if(!hasOwnProperty(listeners, id)) {
							listeners[id] = {};
						}
						
						listeners[id][type] = handler;
						afterRegister(id, type, handler);
					}
				},
				
				/**
				 * 事件销毁
				 */
				destroy: function(id, type) {
					if(type === undefined) {
						if(hasOwnProperty(listeners, id)) {
							delete listeners[id];
						}
					} else {
						if(hasOwnProperty(listeners, id, type)) {
							delete listeners[id][type];
						}
					}
				},
				
				/**
				 * 事件通知
				 */
				notify: function(id, type, data) {
					if(type === "$dispatch") {
						type = data.type;
						data = data.data;
					}
					
					if(hasOwnProperty(listeners, id, type)) {
						listeners[id][type](data);
					} else {
						if(hasOwnProperty(listeners, id, "$dispatch")) {
							if(listeners[id]["$dispatch"]({type,data}) === false) {
								if(!hasOwnProperty(dataCache, id)) {
									dataCache[id] = {};
								}
								dataCache[id][type] = data;
							}
						}else {
							if(!hasOwnProperty(dataCache, id)) {
								dataCache[id] = {};
							}
							dataCache[id][type] = data;
						}
							
					}
				}
			}
			return EventManager;
		})(this)
	}
	
	return this.EventManager;
});



define('vue-event',["vue", "event-manager"] , function(Vue, EventManager) {
	return {
		props: {
			"uid": {
				type: String,
				default: function() {
					return null;
				}
			},
			"autoMatch": {
				default: function() {
					return false;
				}
			}
		},
		
		mounted: function() {
			var that = this;
			if(Boolean(this.uid) === false) 
				return;
			else {
				//如果使用了自动匹配方式，则注册一个调度方法
				if(this.autoMatch === true) {
					EventManager.register(this.uid, "$dispatch", function({type, data}) {
						if(that.hasOwnProperty(type) && "function" === typeof that[type]) {
							that[type](data);
							return true;
						} else {
							return false;
						}
					})
				}
			}
		},
		destroy: function() {
			if(Boolean(this.uid) === true)
				EventManager.destroy(this.uid);
		}
		
	}
});

//导航栏-用户信息修改
define("ns-edit-pw",[ "vue", "nui", "jquery", 
			"/public/ecrp/common/object-util.js",
			"/public/ecrp/common/common.js",
			"/public/ecrp/common/response-util.js"],
		function(Vue, Nui, $) {
	
			var template=`
			<div>
				<a href="javascript:void(0)"
		               @click.stop="openEditPWDialog();">
		               
		                个人信息
		         </a>
	                
				<el-dialog ref="userDialog" title="修改" v-model="userVisible" size="small" :modal-append-to-body="false" 
                 :close-on-click-modal="false" @close="closeDialog"  :vetically=true> 
						<el-form ref="form" placement="right" label-width="100px" :model="model" 
						:rules="rules"  v-loading="loading"  
                     element-loading-text="拼命加载中"> 
						 <el-form-item label="姓名：" required> 
						  <el-form-grid size="xmd"> 
						   <el-form-item prop="userName"> 
						    <el-input  type="text" v-model="model.userName" placeholder="请输入姓名，限制50字"> 
						    </el-input> 
						   </el-form-item> 
						  </el-form-grid> 
						 </el-form-item> 
						 <el-form-item label="登录账号：" > 
						  <el-form-grid size="xmd"> 
						   <el-form-item prop="loginAccount"> 
						    <el-input  :disabled="true"  type="text" v-model="model.loginAccount" placeholder="请输入登录账号，限制30字"> 
						    </el-input> 
						   </el-form-item> 
						  </el-form-grid> 
						 </el-form-item> 
						 <template v-if="saveType === 'edit'"> 
						  <el-form-item label="登录密码："> 
						   <el-form-grid size="xmd"> 
						    <el-form-item prop="password"> 
						     <el-input type="password" :rows="4" v-model="model.password" placeholder="请输入密码，限制50字"> 
						     </el-input> 
						    </el-form-item> 
						   </el-form-grid> 
						  </el-form-item>
						   <el-form-item label="确认密码："> 
                        <el-form-grid size="xmd"> 
                         <el-form-item prop="confirmPwd"> 
                          <el-input type="password" :rows="4" v-model="model.confirmPwd" placeholder="请输入确认密码，限制50字" > 
                          </el-input> 
                         </el-form-item> 
                        </el-form-grid> 
                       </el-form-item> 
						 </template> 
						 <template v-else> 
						  <el-form-item label="登录密码：" required> 
						   <el-form-grid size="xmd"> 
						    <el-form-item prop="password"> 
						     <el-input type="password"  :rows="4" v-model="model.password" placeholder="请输入密码，限制50字"> 
						     </el-input> 
						    </el-form-item> 
						   </el-form-grid> 
						  </el-form-item>
						  <el-form-item label="确认密码：" required> 
                        <el-form-grid size="xmd"> 
                         <el-form-item prop="confirmPwd"> 
                          <el-input type="password" :rows="4" v-model="model.confirmPwd" placeholder="请输入确认密码，限制50字" > 
                          </el-input> 
                         </el-form-item> 
                        </el-form-grid> 
                       </el-form-item> 
						 </template> 
						 <el-form-item label="所属部门：" > 
						  <el-form-grid size="xmd"> 
						   <el-form-item prop="department"> 
						    <el-input  :disabled="true"  type="text" v-model="model.department.text" >
						    </el-input>
						    </ns-droptree> 
						   </el-form-item> 
						  </el-form-grid> 
						 </el-form-item> 
						 <el-form-item label="选择岗位：" > 
						  <el-form-grid size="xmd"> 
						   <el-form-item prop="positionCode"> 
						    <el-select  :disabled="true" v-model="model.positionCode" placeholder="请选择"> 
						     <el-option v-for="item in state.positionOptions" :key="item.code" :label="item.name" :value="item.code"> 
						     </el-option> 
						    </el-select> 
						   </el-form-item> 
						  </el-form-grid> 
						 </el-form-item> 
						 <el-form-item label="是否启用："> 
						  <el-form-grid size="xmd"> 
						   <el-form-item prop="state"> 
						    <el-switch  :disabled="true" v-model="model.state" on-text="启用" off-text="禁用" :width="55" :on-value="1" :off-value="0"></el-switch> 
						   </el-form-item> 
						  </el-form-grid> 
						 </el-form-item> 
						</el-form>
		              <div slot="footer" class="dialog-footer">
			              <el-button @click="()=>{ this.userVisible = false;}">取消</el-button>
			              <el-button type="primary" @click="save">保存</el-button>
		              </div>
		         </el-dialog>
		       </div>
			`;
			
			Vue.component("ns-edit-pw",{
				template:template,
				data : function(){
					var vm = this;
					return {
						tabs : "userInfo",
						userVisible : false,
						dialogTitle : "",
						saveType : "",
						loading: false,
						model: {
						    loginAccount: "",
						    password: "",
						    confirmPwd: "",
						    userName: "",
						    department: {text: "", value: ""},
						    departmentCode: "",
						    positionCode: "",
						    state: 1,
						    deptName:""
						},
						state: {
						    positionOptions: [],
						    isEcho: false
						},
						rules: createRules(vm),
						formUrl: "/organization/user/saveOrUpdateUser"
					}
				},
				watch: {

				    "model.department.value": function(val){
				        var that = this;
				        if(val !== ''){
							$.post("/organization/user/queryPositionByDeptId",{deptId: val})
							.done((resp)=>{
								ResponseUtil.check(resp,that,"",()=>{
									if(resp.result.length > 0){
	                                    that.$set(that.state,'positionOptions',resp.result);
	                                    that.$set(that.model,'departmentCode',resp.result[0].department_code);
									}else{
	                                     that.$set(that.state,'positionOptions',[]);
	                                }
								},()=>{
									throw new Error(resp.msg);
								})
	                            if(!that.state.isEcho){
	                                that.model.positionCode = "";
	                            }else{
	                                that.state.isEcho = false;
	                            }
	                           
	                            
							})
						}else{
				             that.$set(that.state,'positionOptions',[]);
				             if(!that.state.isEcho){
				                that.model.positionCode = "";
				             }else{
				                 that.state.isEcho = false;
				             }
				             
				        }

				    }
				
				},
				
				methods:{
					
					 openEditPWDialog:function(){
						
//						 e.stopPropagation();
						 var that = this;
						 this.resetForm();
	                	$.ajax({
	                		type:"post",
	                		url: "/base/common/queryUserInfo",
	                		success: function(resp){
	                			ResponseUtil.check(resp, that, "", () => {
					                var model = {
					                    "loginAccount": resp.result.loginAccount,
					                    "userName":  resp.result.userName,
					                    "positionCode":  resp.result.positionCode,
					                    "department": {
					                        "text": resp.result.deptName,
					                        "value": String(resp.result.deptId)
					                    },
					                    "id": resp.result.userId,
					                    "state": parseInt(resp.result.state),
					                }
					                that.setModel(model);
					               
					            }, () => {
					                that.$message.error(resp.msg);
					            })
					             that.userVisible = true;
	                			 that.$nextTick( function(){
	                	                that.state.isEcho = true;
	                	               
	                	            });
	                		}
	                	});
					  },
					  //关闭弹窗
						closeDialog: function(){
							this.resetForm();
						},
						// 保存
						save: function () {
						    var that = this;
						    var handleParams = function (params) {
						        //params
						        var userVo = {
						            departmentCode: params.departmentCode,
						            positionCode: params.positionCode,
						        }
						        delete params.department;
						        delete params.departmentCode;
						        delete params.positionCode;
						        params = ObjectUtil.toMap(params,"sysUser");
						        return Object.assign(userVo,params);
						    }
						    var info;
						    // 修改
						    if (that.saveType == "edit") {
						        info = "修改";
						        that.saveType == "";
						    }else info = "新增";
						    //验证并提交
					        that.validAndSubmit({
					            handleParams: handleParams,
					            success: function (resp) {
					                ResponseUtil.check(resp,that,info,()=>{
					                     that.userVisible = false;
					                });
					                if(resp.success){
					                	that.$message({
						                    message: resp.result.msg ,
						                    type: 'success'
						                });
					                }else{
					                	resp.msg ? that.$message.error(resp.msg)
						            			:that.$message.error("修改失败");
					                }
					            },

					        });
						},



					setModel: function(model){
						this.$set(this,"model",model);
					},
					resetForm : function() {
					    this.setModel(this.$options.data().model);
					    this.$refs.form ? this.$refs.form.resetFields() : null;
					},
					
					
					
					/**
					 * vue表单验证提交
					 */
					validAndSubmit: function (options) {
						var $this = this;
						$this.$refs.form.validate(function(state){
							if(state)
								$this.submit(options);
						})
					},
					submit: function (options) {
						var $this =this;
						function resolver(params) {
							$.ajax({
								url: options && options.url || $this.formUrl,
								data: params,
								type: "post",
								dataType: options && options.type || "json",
								success: function(data,ts,xhr) {
									 if(options && options.success && typeof options.success === "function") {
									 	options.success(data, ts, xhr, $this);
									 }
								},
								error: function(xhr, ts, error) {
									if(options && options.error && typeof options.error === "function") {
									 	options.error(xhr, ts, error, $this);
									 }
								},
								complete:function(xhr, ts) {
									if(options && options.complete && typeof options.complete === "function") {
									 	options.complete(data, ts, $this);
									 }
								}
							})
						}
						var params = $.extend(true,{},this.model);
						
						if(options && options.handleParams && typeof options.handleParams === "function") {
							resolver(options.handleParams(params));
						} else {
							resolver(params);
						}
					},
			
			
				}
			})
			
			
			function createRules(vm) {
				return	{
						    "loginAccount": [{
						        required: true,
						        message: "请输入登录账号",
						        trigger: "blur"
						    },{
						        min: 0,
						        max: 30,
						        message: "已超过可输入长度",
						        trigger: "blur,change"
						    },{
						    	validator: (rule, value, callback)=>{
					                var params = {
					                    id: vm.model.id? vm.model.id: 0,
					                    loginAccount: value
					               }
					                $.post("/organization/user/hasLoginAccountExist",params )
					                    .done((resp)=>{
					                        if(!resp.success){
					                            callback(new Error(resp.msg))
					                        }else{
					                            callback();
					                        }
					                    })
					            },
					            trigger: "blur"
						        }],
						    "userName": [{
						        required: true,
						        message: "请输入姓名",
						        trigger: "blur"
						    },{
						        min: 0,
						        max: 50,
						        message: "已超过可输入长度",
						        trigger: "blur,change"
						    }],
						    "password": [{
						        validator: (rule, value, callback) => {
						             if( value === '' &&  vm.model.confirmPwd ===''){
						                callback();
						            } else if (!value || value === '') {
						                callback(new Error('请输入密码'));
						            } else {
						                if (vm.model && vm.model.confirmPwd !== '') {
						                	vm.$refs.form.validateField('confirmPwd');
						                }
						            callback();
						            }
						        },
						    },{
						        min: 0,
						        max: 50,
						        message: "已超过可输入长度",
						        trigger: "blur,change"
						    }],
						    "confirmPwd": [{
						        validator: (rule,value,callback)=>{
						            if( value === '' &&  vm.model.password ===''){
						                callback();
						            } else if (!value || value === '') {
						                callback(new Error('请再次输入密码'));
						            } else if (value !== vm.model.password) {
						                callback(new Error('两次输入密码不一致!'));
						            } else {
						                callback();
						            }
						        },
						        trigger: "blur"
						     },{
						        min: 0,
						        max: 50,
						        message: "已超过可输入长度",
						        trigger: "blur,change"
						    }],
						    "department": [{
						        type: "object",
						        required: true,
						        fields: {
						            text: {
						                type: "string",
						                required: true,
						                message: "请选择部门"
						            },
						            value: {
						                type: "string",
						                required: true,
						                message: "请选择部门"
						            }
						        },
						        trigger: "change"
						    }],
						    "positionCode": [{
						        required: true,
						        trigger: "change",
						        message: "请选择岗位"
						    }]
				}
			}
			
			var watch ={
				    "model.department.value": function(val){
				        var that = this;
				        if(val !== ''){
							$.post("/organization/user/queryPositionByDeptId",{deptId: val})
							.done((resp)=>{
								ResponseUtil.check(resp,that,"",()=>{
									if(resp.result.length > 0){
	                                    that.$set(that.state,'positionOptions',resp.result);
	                                    that.$set(that.model,'departmentCode',resp.result[0].department_code);
									}else{
	                                     that.$set(that.state,'positionOptions',[]);
	                                }
								},()=>{
									throw new Error(resp.msg);
								})
	                            if(!that.state.isEcho){
	                                that.model.positionCode = "";
	                            }else{
	                                that.state.isEcho = false;
	                            }
	                           
	                            
							})
						}else{
				             that.$set(that.state,'positionOptions',[]);
				             if(!that.state.isEcho){
				                that.model.positionCode = "";
				             }else{
				                 that.state.isEcho = false;
				             }
				             
				        }

				    }
				};
			
			 new Vue({
				el: "#app-pw",
				methods:{
					openEditPWDialog : function(){
						this.$refs.editPW.openEditPWDialog();
					  },
				}
			})
		});

/**
 * 数字范围输入组件
 */
define("ns-number",["jquery", "vue", "nui"], function ($, Vue, Nui) {

	var $template = `
	<div>
	  <el-form-grid :size="size">
        <el-input type="number"  v-model="paymentStart" class="text-right"></el-input>
        </el-date-picker>
	    </el-form-grid>~
	    <el-form-grid :size="size">
	    <el-input type="number"  v-model="paymentEnd" class="text-right"></el-input>
	    </el-date-picker>
     </el-form-grid>
     </div>
	`;

	Vue.component("ns-number", {
		template: $template,
		props: {
			value:{
				type:Array,
				default:[]
			},
		    size:{
				type:String,
				default:'md'
			}
		},
		data: function () {
			return {
				paymentStart:'',
				paymentEnd: ''
			}
		},
		watch:{
			value:function(val){
				if(val.length==0){
					this.paymentStart = "";
					this.paymentEnd = "";
				}
			},
			paymentStart:function(val){
				this.$emit("input",[val,this.paymentEnd]);
			},
			paymentEnd:function(val){
				this.$emit("input",[this.paymentStart,val]);
			}
		},
		methods:{
			getText(){
				if(this.paymentStart!='' && this.paymentEnd != ''){
					return this.paymentStart + "~" + this.paymentEnd;
				}
			}
		}
	});
});

/**
 * 时间范围选择组件
 */
define("ns-datetime",["jquery", "vue", "nui","moment"], function ($, Vue, Nui,moment) {

	var $template = `
	<div>
	  <el-form-grid :size="size">
        <el-date-picker :type="dateType" :placeholder="startPlaceholder" v-model="startDate">
        </el-date-picker>
	    </el-form-grid>~
	    <el-form-grid :size="size">
	    <el-date-picker :type="dateType" :placeholder="endPlaceholder" v-model="endDate">
	    </el-date-picker>
     </el-form-grid>
     </div>
	`;

	Vue.component("ns-datetime", {
		template: $template,
		props: {
			value:{
				type:Array,
				default:[]
			},
		    size:{
				type:String,
				default:'md'
			},
			dateType: {
		      type: String,
		      default: 'datetime'
		    },
		    startPlaceholder:{
		      type: String,
		      default: '请输入开始时间'
		    },
		    endPlaceholder:{
			      type: String,
			      default: '请输入结束时间'
			  },
			  format: {
						type: String,
					  default: function(){
					  	 return  "YYYY-MM-DD HH:mm:ss";
						}
				}
		},
		data: function () {
			return {
//				startDate:'',
//			    endDate: ''
			    startDate :'',
				endDate : '',
			}
		},
		watch:{
			value:function(val){
					this.startDate = this.value.length > 0 ? this.value[0] : '';
					this.endDate = this.value.length > 1 ? this.value[1] : '';
			},
			startDate:function(val){
        if(val){
          this.startDate= this.dateFormat(this.startDate)
        }
			},
			endDate:function(val){
        if(val){
          this.endDate = this.dateFormat(this.endDate)
        }
			},
      timeRange: function(val){
        this.$emit("input",val);
			}
		},
		methods:{
				getText(){
						if( this.endDate  && this.startDate ){
								var endDate_ = this.endDate ? this.dateFormat(this.endDate):'';
								var startDate_ = this.startDate ? this.dateFormat(this.startDate):'';
								return startDate_+"~"+endDate_;
						}else if(this.endDate){
								return "<=" + this.endDate;
						}else if(this.startDate) {
								return ">=" + this.startDate;
						}
				},
				dateFormat(date){
						return moment(date).format(this.format);
				}
		},
		computed:{
				timeRange: function(){
					return [this.startDate,this.endDate];
				}
    }
	});
});



define('utilbuild/main',[
       "object-util",
		"directive",
        "ns-tree",
		"ns-select",
		"ns-table-column-operate-button",
        "ns-table-operate-button",
        "components",//==========
		
		"ns-goods-select",
		"render-helper",
		"ns-droptree",
		"ns-brand-multi-select",
		"response-util",
		"ns-cascader",
		"event-manager",
		"vue-event",
		"ns-edit-pw",
		"ns-datetime",
		"ns-number"
    ] // 基于vue的拖拽插件]
    , function () {

	  
    });
